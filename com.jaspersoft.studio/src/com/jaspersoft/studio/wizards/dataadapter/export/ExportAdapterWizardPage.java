/*******************************************************************************
 * Copyright (C) 2005 - 2014 TIBCO Software Inc. All rights reserved.
 * http://www.jaspersoft.com.
 * 
 * Unless you have purchased  a commercial license agreement from Jaspersoft,
 * the following license terms  apply:
 * 
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
package com.jaspersoft.studio.wizards.dataadapter.export;

import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.pde.internal.ui.wizards.exports.AbstractExportWizardPage;
import org.eclipse.pde.internal.ui.wizards.exports.ExportDestinationTab;
import org.eclipse.pde.internal.ui.wizards.exports.PluginExportWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;

import com.jaspersoft.studio.messages.Messages;

/**
 * Custom page to provide the informations to export a data adapter
 * plugin project as a jar file. It hides some values from the original
 * page, to allow the adapter to be exported easily
 * 
 * @author Orlandin Marco
 *
 */
@SuppressWarnings("restriction")
public class ExportAdapterWizardPage extends PluginExportWizardPage {
	
	/**
	 * Area where the destination path are shown, it relax the access
	 * to some methods and redefine the method to enable\disable the text
	 * areas when the radio selection changes
	 * 
	 * @author Orlandin Marco
	 *
	 */
	private class InnerExportDestinationTab extends ExportDestinationTab{
		
		public InnerExportDestinationTab(AbstractExportWizardPage page) {
			super(page);
		}
		
		@Override
		protected void updateExportType() {
			fArchiveCombo.setEnabled(fArchiveFileButton.getSelection());
			fBrowseFile.setEnabled(fArchiveFileButton.getSelection());
			fDirectoryCombo.setEnabled(fDirectoryButton.getSelection());
			fBrowseDirectory.setEnabled(fDirectoryButton.getSelection());
			fInstallCombo.setEnabled(fInstallButton.getSelection());
			fBrowseInstall.setEnabled(fInstallButton.getSelection());
		}
		
		@Override
		protected String validate() {
			return super.validate();
		} 
		
		@Override
		protected void saveSettings(IDialogSettings settings) {
			super.saveSettings(settings);
		}
	}
	
	/**
	 * Save the qualifier id for the manifest that is automatically generated
	 */
	private String storedQualifier;
	
	public ExportAdapterWizardPage(IStructuredSelection selection) {
		super(selection);
		setTitle(Messages.ExportAdapterWizardPage_title);
		setDescription(Messages.ExportAdapterWizardPage_description);
	}

	/**
	 * Keep only the path controls and dispose the others, but before
	 * store the qualifier generated by the option controls
	 */
	@Override
	public void createControl(Composite parent) {
		super.createControl(parent);
		//force the option controls to generate the qualifier
		getDialogSettings().put("qualifier", true); //$NON-NLS-1$
		storedQualifier = super.getQualifier();
		fTabFolder.getTabList()[1].dispose();
		fTabFolder.getTabList()[1].dispose();
		fTabFolder.getItems()[1].dispose();
		fTabFolder.getItems()[1].dispose();
		pageChanged();
	}
	
	/**
	 * Create the destination tab with an extended one
	 */
	protected void createDestinationTab(TabFolder folder) {
		fDestinationTab = new InnerExportDestinationTab(this);
		TabItem item = new TabItem(folder, SWT.NONE);
		item.setControl(fDestinationTab.createControl(folder));
		item.setText(Messages.ExportAdapterWizardPage_destinationTab);
	}
	
	/**
	 * Save the setting only of the destination tab, since the other
	 * are disposed
	 */
	@Override
	protected void saveSettings(IDialogSettings settings) {
		((InnerExportDestinationTab)fDestinationTab).saveSettings(settings);
	}
	
	/**
	 * Return the stored qualifier
	 */
	protected String getQualifier() {
		return storedQualifier;
	}
	
	/**
	 * Validate the content of the page
	 */
	@Override
	protected void pageChanged() {
		if (getMessage() != null)
			setMessage(null);
		String error = getSelectedItems().length > 0 ? null : Messages.ExportAdapterWizardPage_noElementError;
		if (error == null)
			error = ((InnerExportDestinationTab)fDestinationTab).validate();
		setErrorMessage(error);
		setPageComplete(error == null);
	}


	// Fix some getter methods to return a static value according to the adapter plugin project export
	
	protected boolean doExportSource() {
		return false;
	}

	protected boolean doExportSourceBundles() {
		return false;
	}

	protected boolean useJARFormat() {
		return true;
	}

	protected boolean allowBinaryCycles() {
		return true;
	}

	protected boolean useWorkspaceCompiledClasses() {
		return false;
	}

	protected boolean doGenerateAntFile() {
		return false;
	}
	
	protected String getAntBuildFileName() {
		return null;
	}
}
