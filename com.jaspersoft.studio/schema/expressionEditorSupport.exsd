<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="com.jaspersoft.studio" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="com.jaspersoft.studio" id="expressionEditorSupport" name="JRExpression Editor Support"/>
      </appInfo>
      <documentation>
         [Enter description of this extension point.]
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <choice>
            <element ref="editorSupportFactory"/>
         </choice>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="editorSupportFactory">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class that implements the interface IExpressionEditorSupportFactory and should provide the facilities for the JRExpression editor and supported languages (i.e java, groovy etc.)
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":com.jaspersoft.studio.editor.expression.IExpressionEditorSupportFactory"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="override" type="boolean" use="default" value="true">
            <annotation>
               <documentation>
                  The override value is used to overwrite any default implementation with a potential custom one provided by other contributors.
In the typical scenario the default implementation wil have the attribute value set to false. 
Given the fact that a default is supposed to be already contributed, other contributors that want to override the behavior must be sure that this value is set to true (default value). 
Actually it is not supported the &quot;multiple&quot; override of a default implementation. So if more extensions are found the first one found is used.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiinfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
