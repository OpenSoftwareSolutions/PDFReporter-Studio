/*
* generated by Xtext
*/
grammar InternalJavaJRExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.jaspersoft.studio.editor.jrexpressions.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.editor.jrexpressions.services.JavaJRExpressionGrammarAccess;

}

@parser::members {
 
 	private JavaJRExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JavaJRExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleJRExpressionModel
entryRuleJRExpressionModel 
:
{ before(grammarAccess.getJRExpressionModelRule()); }
	 ruleJRExpressionModel
{ after(grammarAccess.getJRExpressionModelRule()); } 
	 EOF 
;

// Rule JRExpressionModel
ruleJRExpressionModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJRExpressionModelAccess().getExpressionAssignment()); }
(rule__JRExpressionModel__ExpressionAssignment)?
{ after(grammarAccess.getJRExpressionModelAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJasperReportsExpression
entryRuleJasperReportsExpression 
:
{ before(grammarAccess.getJasperReportsExpressionRule()); }
	 ruleJasperReportsExpression
{ after(grammarAccess.getJasperReportsExpressionRule()); } 
	 EOF 
;

// Rule JasperReportsExpression
ruleJasperReportsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJasperReportsExpressionAccess().getConditionalExpressionParserRuleCall()); }
	ruleConditionalExpression
{ after(grammarAccess.getJasperReportsExpressionAccess().getConditionalExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression 
:
{ before(grammarAccess.getConditionalExpressionRule()); }
	 ruleConditionalExpression
{ after(grammarAccess.getConditionalExpressionRule()); } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup()); }
(rule__ConditionalExpression__Group__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression 
:
{ before(grammarAccess.getConditionalOrExpressionRule()); }
	 ruleConditionalOrExpression
{ after(grammarAccess.getConditionalOrExpressionRule()); } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getGroup()); }
(rule__ConditionalOrExpression__Group__0)
{ after(grammarAccess.getConditionalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression 
:
{ before(grammarAccess.getConditionalAndExpressionRule()); }
	 ruleConditionalAndExpression
{ after(grammarAccess.getConditionalAndExpressionRule()); } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getGroup()); }
(rule__ConditionalAndExpression__Group__0)
{ after(grammarAccess.getConditionalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstanceofExpression
entryRuleInstanceofExpression 
:
{ before(grammarAccess.getInstanceofExpressionRule()); }
	 ruleInstanceofExpression
{ after(grammarAccess.getInstanceofExpressionRule()); } 
	 EOF 
;

// Rule InstanceofExpression
ruleInstanceofExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getGroup()); }
(rule__InstanceofExpression__Group__0)
{ after(grammarAccess.getInstanceofExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpressionNotPlusMinus
entryRuleUnaryExpressionNotPlusMinus 
:
{ before(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 ruleUnaryExpressionNotPlusMinus
{ after(grammarAccess.getUnaryExpressionNotPlusMinusRule()); } 
	 EOF 
;

// Rule UnaryExpressionNotPlusMinus
ruleUnaryExpressionNotPlusMinus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getAlternatives()); }
(rule__UnaryExpressionNotPlusMinus__Alternatives)
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticField
entryRuleStaticField 
:
{ before(grammarAccess.getStaticFieldRule()); }
	 ruleStaticField
{ after(grammarAccess.getStaticFieldRule()); } 
	 EOF 
;

// Rule StaticField
ruleStaticField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticFieldAccess().getGroup()); }
(rule__StaticField__Group__0)
{ after(grammarAccess.getStaticFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseJRExpression
entryRuleBaseJRExpression 
:
{ before(grammarAccess.getBaseJRExpressionRule()); }
	 ruleBaseJRExpression
{ after(grammarAccess.getBaseJRExpressionRule()); } 
	 EOF 
;

// Rule BaseJRExpression
ruleBaseJRExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseJRExpressionAccess().getAlternatives()); }
(rule__BaseJRExpression__Alternatives)
{ after(grammarAccess.getBaseJRExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRFieldObj
entryRuleJRFieldObj 
:
{ before(grammarAccess.getJRFieldObjRule()); }
	 ruleJRFieldObj
{ after(grammarAccess.getJRFieldObjRule()); } 
	 EOF 
;

// Rule JRFieldObj
ruleJRFieldObj
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJRFieldObjAccess().getGroup()); }
(rule__JRFieldObj__Group__0)
{ after(grammarAccess.getJRFieldObjAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRParameterObj
entryRuleJRParameterObj 
:
{ before(grammarAccess.getJRParameterObjRule()); }
	 ruleJRParameterObj
{ after(grammarAccess.getJRParameterObjRule()); } 
	 EOF 
;

// Rule JRParameterObj
ruleJRParameterObj
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJRParameterObjAccess().getGroup()); }
(rule__JRParameterObj__Group__0)
{ after(grammarAccess.getJRParameterObjAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRVariableObj
entryRuleJRVariableObj 
:
{ before(grammarAccess.getJRVariableObjRule()); }
	 ruleJRVariableObj
{ after(grammarAccess.getJRVariableObjRule()); } 
	 EOF 
;

// Rule JRVariableObj
ruleJRVariableObj
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJRVariableObjAccess().getGroup()); }
(rule__JRVariableObj__Group__0)
{ after(grammarAccess.getJRVariableObjAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRResourceBundleKeyObj
entryRuleJRResourceBundleKeyObj 
:
{ before(grammarAccess.getJRResourceBundleKeyObjRule()); }
	 ruleJRResourceBundleKeyObj
{ after(grammarAccess.getJRResourceBundleKeyObjRule()); } 
	 EOF 
;

// Rule JRResourceBundleKeyObj
ruleJRResourceBundleKeyObj
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJRResourceBundleKeyObjAccess().getGroup()); }
(rule__JRResourceBundleKeyObj__Group__0)
{ after(grammarAccess.getJRResourceBundleKeyObjAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodsExpression
entryRuleMethodsExpression 
:
{ before(grammarAccess.getMethodsExpressionRule()); }
	 ruleMethodsExpression
{ after(grammarAccess.getMethodsExpressionRule()); } 
	 EOF 
;

// Rule MethodsExpression
ruleMethodsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup()); }
(rule__MethodsExpression__Group__0)
{ after(grammarAccess.getMethodsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
(rule__IntLiteral__Group__0)
{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongLiteral
entryRuleLongLiteral 
:
{ before(grammarAccess.getLongLiteralRule()); }
	 ruleLongLiteral
{ after(grammarAccess.getLongLiteralRule()); } 
	 EOF 
;

// Rule LongLiteral
ruleLongLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongLiteralAccess().getGroup()); }
(rule__LongLiteral__Group__0)
{ after(grammarAccess.getLongLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLiteralAccess().getGroup()); }
(rule__FloatLiteral__Group__0)
{ after(grammarAccess.getFloatLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral 
:
{ before(grammarAccess.getDoubleLiteralRule()); }
	 ruleDoubleLiteral
{ after(grammarAccess.getDoubleLiteralRule()); } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleLiteralAccess().getGroup()); }
(rule__DoubleLiteral__Group__0)
{ after(grammarAccess.getDoubleLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharLiteral
entryRuleCharLiteral 
:
{ before(grammarAccess.getCharLiteralRule()); }
	 ruleCharLiteral
{ after(grammarAccess.getCharLiteralRule()); } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharLiteralAccess().getGroup()); }
(rule__CharLiteral__Group__0)
{ after(grammarAccess.getCharLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
(rule__StringLiteral__Group__0)
{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
(rule__BooleanLiteral__Group__0)
{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getGroup()); }
(rule__NullLiteral__Group__0)
{ after(grammarAccess.getNullLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParExpression
entryRuleParExpression 
:
{ before(grammarAccess.getParExpressionRule()); }
	 ruleParExpression
{ after(grammarAccess.getParExpressionRule()); } 
	 EOF 
;

// Rule ParExpression
ruleParExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParExpressionAccess().getGroup()); }
(rule__ParExpression__Group__0)
{ after(grammarAccess.getParExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastedExpression
entryRuleCastedExpression 
:
{ before(grammarAccess.getCastedExpressionRule()); }
	 ruleCastedExpression
{ after(grammarAccess.getCastedExpressionRule()); } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup()); }
(rule__CastedExpression__Group__0)
{ after(grammarAccess.getCastedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayCreator
entryRuleArrayCreator 
:
{ before(grammarAccess.getArrayCreatorRule()); }
	 ruleArrayCreator
{ after(grammarAccess.getArrayCreatorRule()); } 
	 EOF 
;

// Rule ArrayCreator
ruleArrayCreator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup()); }
(rule__ArrayCreator__Group__0)
{ after(grammarAccess.getArrayCreatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer 
:
{ before(grammarAccess.getArrayInitializerRule()); }
	 ruleArrayInitializer
{ after(grammarAccess.getArrayInitializerRule()); } 
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayInitializerAccess().getGroup()); }
(rule__ArrayInitializer__Group__0)
{ after(grammarAccess.getArrayInitializerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation 
:
{ before(grammarAccess.getMethodInvocationRule()); }
	 ruleMethodInvocation
{ after(grammarAccess.getMethodInvocationRule()); } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodInvocationAccess().getGroup()); }
(rule__MethodInvocation__Group__0)
{ after(grammarAccess.getMethodInvocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFullMethodName
entryRuleFullMethodName 
:
{ before(grammarAccess.getFullMethodNameRule()); }
	 ruleFullMethodName
{ after(grammarAccess.getFullMethodNameRule()); } 
	 EOF 
;

// Rule FullMethodName
ruleFullMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFullMethodNameAccess().getGroup()); }
(rule__FullMethodName__Group__0)
{ after(grammarAccess.getFullMethodNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArguments
entryRuleArguments 
:
{ before(grammarAccess.getArgumentsRule()); }
	 ruleArguments
{ after(grammarAccess.getArgumentsRule()); } 
	 EOF 
;

// Rule Arguments
ruleArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentsAccess().getGroup()); }
(rule__Arguments__Group__0)
{ after(grammarAccess.getArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference 
:
{ before(grammarAccess.getJvmTypeReferenceRule()); }
	 ruleJvmTypeReference
{ after(grammarAccess.getJvmTypeReferenceRule()); } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getGroup()); }
(rule__JvmTypeReference__Group__0)
{ after(grammarAccess.getJvmTypeReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference 
:
{ before(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 ruleJvmParameterizedTypeReference
{ after(grammarAccess.getJvmParameterizedTypeReferenceRule()); } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup()); }
(rule__JvmParameterizedTypeReference__Group__0)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference 
:
{ before(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 ruleJvmArgumentTypeReference
{ after(grammarAccess.getJvmArgumentTypeReferenceRule()); } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives()); }
(rule__JvmArgumentTypeReference__Alternatives)
{ after(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference 
:
{ before(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 ruleJvmWildcardTypeReference
{ after(grammarAccess.getJvmWildcardTypeReferenceRule()); } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup()); }
(rule__JvmWildcardTypeReference__Group__0)
{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound 
:
{ before(grammarAccess.getJvmUpperBoundRule()); }
	 ruleJvmUpperBound
{ after(grammarAccess.getJvmUpperBoundRule()); } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmUpperBoundAccess().getGroup()); }
(rule__JvmUpperBound__Group__0)
{ after(grammarAccess.getJvmUpperBoundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound 
:
{ before(grammarAccess.getJvmLowerBoundRule()); }
	 ruleJvmLowerBound
{ after(grammarAccess.getJvmLowerBoundRule()); } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJvmLowerBoundAccess().getGroup()); }
(rule__JvmLowerBound__Group__0)
{ after(grammarAccess.getJvmLowerBoundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOp
entryRuleRelationalOp 
:
{ before(grammarAccess.getRelationalOpRule()); }
	 ruleRelationalOp
{ after(grammarAccess.getRelationalOpRule()); } 
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
(rule__RelationalOp__Alternatives)
{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EqualityExpression__OpAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_2()); }

	'%' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionNotPlusMinusParserRuleCall_2()); }
	ruleUnaryExpressionNotPlusMinus
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionNotPlusMinusParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpressionNotPlusMinus__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getGroup_0()); }
(rule__UnaryExpressionNotPlusMinus__Group_0__0)
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getGroup_1()); }
(rule__UnaryExpressionNotPlusMinus__Group_1__0)
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getCastedExpressionParserRuleCall_2()); }
(	ruleCastedExpression)
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getCastedExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryExpressionParserRuleCall_3()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParExpressionParserRuleCall_0()); }
	ruleParExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getArrayCreatorParserRuleCall_2()); }
	ruleArrayCreator
{ after(grammarAccess.getPrimaryExpressionAccess().getArrayCreatorParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getBaseJRExpressionParserRuleCall_3()); }
(	ruleBaseJRExpression)
{ after(grammarAccess.getPrimaryExpressionAccess().getBaseJRExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getMethodsExpressionParserRuleCall_4()); }
	ruleMethodsExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getMethodsExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getStaticFieldParserRuleCall_5()); }
	ruleStaticField
{ after(grammarAccess.getPrimaryExpressionAccess().getStaticFieldParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseJRExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseJRExpressionAccess().getJRFieldObjParserRuleCall_0()); }
	ruleJRFieldObj
{ after(grammarAccess.getBaseJRExpressionAccess().getJRFieldObjParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBaseJRExpressionAccess().getJRParameterObjParserRuleCall_1()); }
	ruleJRParameterObj
{ after(grammarAccess.getBaseJRExpressionAccess().getJRParameterObjParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBaseJRExpressionAccess().getJRVariableObjParserRuleCall_2()); }
	ruleJRVariableObj
{ after(grammarAccess.getBaseJRExpressionAccess().getJRVariableObjParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBaseJRExpressionAccess().getJRResourceBundleKeyObjParserRuleCall_3()); }
	ruleJRResourceBundleKeyObj
{ after(grammarAccess.getBaseJRExpressionAccess().getJRResourceBundleKeyObjParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_1_0()); }
(rule__MethodsExpression__Group_1_0__0)
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_1_1()); }
(rule__MethodsExpression__Group_1_1__0)
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__ObjectExpressionAlternatives_1_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0()); }
	ruleBaseJRExpression
{ after(grammarAccess.getMethodsExpressionAccess().getObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getMethodsExpressionAccess().getObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1()); }
	ruleStringLiteral
{ after(grammarAccess.getMethodsExpressionAccess().getObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getIntLiteralParserRuleCall_0()); }
	ruleIntLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getIntLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getLongLiteralParserRuleCall_1()); }
	ruleLongLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getLongLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getFloatLiteralParserRuleCall_2()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getFloatLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getDoubleLiteralParserRuleCall_3()); }
	ruleDoubleLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getDoubleLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getCharLiteralParserRuleCall_4()); }
	ruleCharLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getCharLiteralParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getStringLiteralParserRuleCall_5()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getStringLiteralParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralParserRuleCall_6()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getNullLiteralParserRuleCall_7()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralExpressionAccess().getNullLiteralParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
(rule__BooleanLiteral__IsTrueAssignment_1_1)
{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeAssignment_1_0()); }
(rule__Type__PrimitiveTypeAssignment_1_0)
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getJvmTypeAssignment_1_1()); }
(rule__Type__JvmTypeAssignment_1_1)
{ after(grammarAccess.getTypeAccess().getJvmTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup_3_0()); }
(rule__ArrayCreator__Group_3_0__0)
{ after(grammarAccess.getArrayCreatorAccess().getGroup_3_0()); }
)
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup_3_0()); }
(rule__ArrayCreator__Group_3_0__0)*
{ after(grammarAccess.getArrayCreatorAccess().getGroup_3_0()); }
)
)

    |(
{ before(grammarAccess.getArrayCreatorAccess().getGroup_3_1()); }
(rule__ArrayCreator__Group_3_1__0)
{ after(grammarAccess.getArrayCreatorAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmArgumentTypeReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); }
	ruleJvmTypeReference
{ after(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); }
	ruleJvmWildcardTypeReference
{ after(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0()); }
(rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0)
{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1()); }
(rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1)
{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); }

	'boolean' 

{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); }

	'byte' 

{ after(grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); }

	'short' 

{ after(grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); }

	'int' 

{ after(grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); }

	'long' 

{ after(grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); }

	'float' 

{ after(grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); }

	'double' 

{ after(grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0()); }

	'<=' 

{ after(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }

	'>=' 

{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ConditionalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__0__Impl
	rule__ConditionalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getConditionalOrExpressionParserRuleCall_0()); }
	ruleConditionalOrExpression
{ after(grammarAccess.getConditionalExpressionAccess().getConditionalOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
(rule__ConditionalExpression__Group_1__0)?
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__0__Impl
	rule__ConditionalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1_0()); }
(rule__ConditionalExpression__Group_1_0__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__1__Impl
	rule__ConditionalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getTrueStatementAssignment_1_1()); }
(rule__ConditionalExpression__TrueStatementAssignment_1_1)
{ after(grammarAccess.getConditionalExpressionAccess().getTrueStatementAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__2__Impl
	rule__ConditionalExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getFalseStatementAssignment_1_3()); }
(rule__ConditionalExpression__FalseStatementAssignment_1_3)
{ after(grammarAccess.getConditionalExpressionAccess().getFalseStatementAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConditionalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getGroup_1_0_0()); }
(rule__ConditionalExpression__Group_1_0_0__0)
{ after(grammarAccess.getConditionalExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConditionalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1_0_0__0__Impl
	rule__ConditionalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getTestExpressionConditionAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getConditionalExpressionAccess().getTestExpressionConditionAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); }

	'?' 

{ after(grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group__0__Impl
	rule__ConditionalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getConditionalAndExpressionParserRuleCall_0()); }
	ruleConditionalAndExpression
{ after(grammarAccess.getConditionalOrExpressionAccess().getConditionalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getGroup_1()); }
(rule__ConditionalOrExpression__Group_1__0)*
{ after(grammarAccess.getConditionalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group_1__0__Impl
	rule__ConditionalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getGroup_1_0()); }
(rule__ConditionalOrExpression__Group_1_0__0)
{ after(grammarAccess.getConditionalOrExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getRightAssignment_1_1()); }
(rule__ConditionalOrExpression__RightAssignment_1_1)
{ after(grammarAccess.getConditionalOrExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalOrExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getGroup_1_0_0()); }
(rule__ConditionalOrExpression__Group_1_0_0__0)
{ after(grammarAccess.getConditionalOrExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConditionalOrExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group_1_0_0__0__Impl
	rule__ConditionalOrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getConditionalOrExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalOrExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalOrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__ConditionalOrExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getConditionalOrExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group__0__Impl
	rule__ConditionalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getConditionalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getGroup_1()); }
(rule__ConditionalAndExpression__Group_1__0)*
{ after(grammarAccess.getConditionalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group_1__0__Impl
	rule__ConditionalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getGroup_1_0()); }
(rule__ConditionalAndExpression__Group_1_0__0)
{ after(grammarAccess.getConditionalAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getRightAssignment_1_1()); }
(rule__ConditionalAndExpression__RightAssignment_1_1)
{ after(grammarAccess.getConditionalAndExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalAndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getGroup_1_0_0()); }
(rule__ConditionalAndExpression__Group_1_0_0__0)
{ after(grammarAccess.getConditionalAndExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConditionalAndExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group_1_0_0__0__Impl
	rule__ConditionalAndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getConditionalAndExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalAndExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalAndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__ConditionalAndExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getConditionalAndExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getInstanceofExpressionParserRuleCall_0()); }
	ruleInstanceofExpression
{ after(grammarAccess.getEqualityExpressionAccess().getInstanceofExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
(rule__EqualityExpression__Group_1_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_1()); }
(rule__EqualityExpression__RightAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
(rule__EqualityExpression__Group_1_0_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EqualityExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0_0__0__Impl
	rule__EqualityExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__EqualityExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group__0__Impl
	rule__InstanceofExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getInstanceofExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getGroup_1()); }
(rule__InstanceofExpression__Group_1__0)?
{ after(grammarAccess.getInstanceofExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group_1__0__Impl
	rule__InstanceofExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getGroup_1_0()); }
(rule__InstanceofExpression__Group_1_0__0)
{ after(grammarAccess.getInstanceofExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getRightAssignment_1_1()); }
(rule__InstanceofExpression__RightAssignment_1_1)
{ after(grammarAccess.getInstanceofExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InstanceofExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getGroup_1_0_0()); }
(rule__InstanceofExpression__Group_1_0_0__0)
{ after(grammarAccess.getInstanceofExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__InstanceofExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group_1_0_0__0__Impl
	rule__InstanceofExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getInstanceofExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstanceofExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstanceofExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__InstanceofExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getInstanceofExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
(rule__RelationalExpression__Group_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
(rule__RelationalExpression__RightAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
(rule__RelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__RelationalExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
(rule__AdditiveExpression__RightAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
(rule__AdditiveExpression__Group_1_0_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AdditiveExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__0__Impl
	rule__AdditiveExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__AdditiveExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__MultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
(rule__MultiplicativeExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
(rule__MultiplicativeExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplicativeExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
(rule__MultiplicativeExpression__OpAssignment_1_0_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); }
	ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1()); }
	ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpressionNotPlusMinus__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpressionNotPlusMinus__Group_0__0__Impl
	rule__UnaryExpressionNotPlusMinus__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpressionNotPlusMinus__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0()); }

	'~' 

{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpressionNotPlusMinus__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpressionNotPlusMinus__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpressionNotPlusMinus__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1()); }
	ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpressionNotPlusMinus__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpressionNotPlusMinus__Group_1__0__Impl
	rule__UnaryExpressionNotPlusMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpressionNotPlusMinus__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0()); }

	'!' 

{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpressionNotPlusMinus__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpressionNotPlusMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpressionNotPlusMinus__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1()); }
	ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StaticField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticField__Group__0__Impl
	rule__StaticField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getStaticFieldAction_0()); }
(

)
{ after(grammarAccess.getStaticFieldAccess().getStaticFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticField__Group__1__Impl
	rule__StaticField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getGroup_1()); }
(rule__StaticField__Group_1__0)*
{ after(grammarAccess.getStaticFieldAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticField__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getFieldNameAssignment_2()); }
(rule__StaticField__FieldNameAssignment_2)
{ after(grammarAccess.getStaticFieldAccess().getFieldNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StaticField__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticField__Group_1__0__Impl
	rule__StaticField__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getPrefixQMNAssignment_1_0()); }
(rule__StaticField__PrefixQMNAssignment_1_0)
{ after(grammarAccess.getStaticFieldAccess().getPrefixQMNAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticField__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticField__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getDotsAssignment_1_1()); }
(rule__StaticField__DotsAssignment_1_1)
{ after(grammarAccess.getStaticFieldAccess().getDotsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JRFieldObj__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRFieldObj__Group__0__Impl
	rule__JRFieldObj__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JRFieldObj__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRFieldObjAccess().getJRFieldObjAction_0()); }
(

)
{ after(grammarAccess.getJRFieldObjAccess().getJRFieldObjAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRFieldObj__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRFieldObj__Group__1__Impl
	rule__JRFieldObj__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JRFieldObj__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRFieldObjAccess().getFKeyword_1()); }

	'$F' 

{ after(grammarAccess.getJRFieldObjAccess().getFKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRFieldObj__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRFieldObj__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JRFieldObj__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRFieldObjAccess().getBracedIdentifierAssignment_2()); }
(rule__JRFieldObj__BracedIdentifierAssignment_2)
{ after(grammarAccess.getJRFieldObjAccess().getBracedIdentifierAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JRParameterObj__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRParameterObj__Group__0__Impl
	rule__JRParameterObj__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameterObj__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterObjAccess().getJRParameterObjAction_0()); }
(

)
{ after(grammarAccess.getJRParameterObjAccess().getJRParameterObjAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRParameterObj__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRParameterObj__Group__1__Impl
	rule__JRParameterObj__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameterObj__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterObjAccess().getPKeyword_1()); }

	'$P' 

{ after(grammarAccess.getJRParameterObjAccess().getPKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRParameterObj__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRParameterObj__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameterObj__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterObjAccess().getBracedIdentifierAssignment_2()); }
(rule__JRParameterObj__BracedIdentifierAssignment_2)
{ after(grammarAccess.getJRParameterObjAccess().getBracedIdentifierAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JRVariableObj__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRVariableObj__Group__0__Impl
	rule__JRVariableObj__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JRVariableObj__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRVariableObjAccess().getJRVariableObjAction_0()); }
(

)
{ after(grammarAccess.getJRVariableObjAccess().getJRVariableObjAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRVariableObj__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRVariableObj__Group__1__Impl
	rule__JRVariableObj__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JRVariableObj__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRVariableObjAccess().getVKeyword_1()); }

	'$V' 

{ after(grammarAccess.getJRVariableObjAccess().getVKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRVariableObj__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRVariableObj__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JRVariableObj__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRVariableObjAccess().getBracedIdentifierAssignment_2()); }
(rule__JRVariableObj__BracedIdentifierAssignment_2)
{ after(grammarAccess.getJRVariableObjAccess().getBracedIdentifierAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JRResourceBundleKeyObj__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRResourceBundleKeyObj__Group__0__Impl
	rule__JRResourceBundleKeyObj__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JRResourceBundleKeyObj__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRResourceBundleKeyObjAccess().getJRResourceBundleKeyObjAction_0()); }
(

)
{ after(grammarAccess.getJRResourceBundleKeyObjAccess().getJRResourceBundleKeyObjAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRResourceBundleKeyObj__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRResourceBundleKeyObj__Group__1__Impl
	rule__JRResourceBundleKeyObj__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JRResourceBundleKeyObj__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRResourceBundleKeyObjAccess().getRKeyword_1()); }

	'$R' 

{ after(grammarAccess.getJRResourceBundleKeyObjAccess().getRKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JRResourceBundleKeyObj__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JRResourceBundleKeyObj__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JRResourceBundleKeyObj__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRResourceBundleKeyObjAccess().getBracedIdentifierAssignment_2()); }
(rule__JRResourceBundleKeyObj__BracedIdentifierAssignment_2)
{ after(grammarAccess.getJRResourceBundleKeyObjAccess().getBracedIdentifierAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group__0__Impl
	rule__MethodsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodsExpressionAction_0()); }
(

)
{ after(grammarAccess.getMethodsExpressionAccess().getMethodsExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group__1__Impl
	rule__MethodsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getAlternatives_1()); }
(rule__MethodsExpression__Alternatives_1)
{ after(grammarAccess.getMethodsExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_2()); }
(rule__MethodsExpression__Group_2__0)*
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodsExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_0__0__Impl
	rule__MethodsExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationAssignment_1_0_0()); }
(rule__MethodsExpression__IncludeObjectInstatiationAssignment_1_0_0)?
{ after(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_0__1__Impl
	rule__MethodsExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_0_1()); }
(rule__MethodsExpression__MethodInvocationsAssignment_1_0_1)
{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_1_0_2()); }
(rule__MethodsExpression__Group_1_0_2__0)*
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodsExpression__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_0_2__0__Impl
	rule__MethodsExpression__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_0_2_0()); }

	'.' 

{ after(grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_0_2_1()); }
(rule__MethodsExpression__MethodInvocationsAssignment_1_0_2_1)
{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodsExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_1__0__Impl
	rule__MethodsExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getObjectExpressionAssignment_1_1_0()); }
(rule__MethodsExpression__ObjectExpressionAssignment_1_1_0)
{ after(grammarAccess.getMethodsExpressionAccess().getObjectExpressionAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_1_1_1()); }
(rule__MethodsExpression__Group_1_1_1__0)
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_1_1_1()); }
)
(
{ before(grammarAccess.getMethodsExpressionAccess().getGroup_1_1_1()); }
(rule__MethodsExpression__Group_1_1_1__0)*
{ after(grammarAccess.getMethodsExpressionAccess().getGroup_1_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodsExpression__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_1_1__0__Impl
	rule__MethodsExpression__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_1_1_0()); }

	'.' 

{ after(grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_1_1_1()); }
(rule__MethodsExpression__MethodInvocationsAssignment_1_1_1_1)
{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodsExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_2__0__Impl
	rule__MethodsExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getMethodsExpressionAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_2__1__Impl
	rule__MethodsExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getArrayIndexesAssignment_2_1()); }
(rule__MethodsExpression__ArrayIndexesAssignment_2_1)
{ after(grammarAccess.getMethodsExpressionAccess().getArrayIndexesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodsExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodsExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getMethodsExpressionAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
(

)
{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
(rule__IntLiteral__ValueAssignment_1)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LongLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongLiteral__Group__0__Impl
	rule__LongLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongLiteralAccess().getLongLiteralAction_0()); }
(

)
{ after(grammarAccess.getLongLiteralAccess().getLongLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LongLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LongLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongLiteralAccess().getValueAssignment_1()); }
(rule__LongLiteral__ValueAssignment_1)
{ after(grammarAccess.getLongLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLiteral__Group__0__Impl
	rule__FloatLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
(

)
{ after(grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
(rule__FloatLiteral__ValueAssignment_1)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DoubleLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__0__Impl
	rule__DoubleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0()); }
(

)
{ after(grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoubleLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoubleLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueAssignment_1()); }
(rule__DoubleLiteral__ValueAssignment_1)
{ after(grammarAccess.getDoubleLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CharLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharLiteral__Group__0__Impl
	rule__CharLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharLiteralAccess().getCharLiteralAction_0()); }
(

)
{ after(grammarAccess.getCharLiteralAccess().getCharLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CharLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharLiteralAccess().getValueAssignment_1()); }
(rule__CharLiteral__ValueAssignment_1)
{ after(grammarAccess.getCharLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
(

)
{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
(rule__StringLiteral__ValueAssignment_1)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
(

)
{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
(rule__BooleanLiteral__Alternatives_1)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteral__Group__0__Impl
	rule__NullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
(

)
{ after(grammarAccess.getNullLiteralAccess().getNullLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }

	'null' 

{ after(grammarAccess.getNullLiteralAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__0__Impl
	rule__ParExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__1__Impl
	rule__ParExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getJasperReportsExpressionParserRuleCall_1()); }
	ruleJasperReportsExpression
{ after(grammarAccess.getParExpressionAccess().getJasperReportsExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__0__Impl
	rule__CastedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getCastedExpressionAction_0()); }
(

)
{ after(grammarAccess.getCastedExpressionAccess().getCastedExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__1__Impl
	rule__CastedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__2__Impl
	rule__CastedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getCastTypeAssignment_2()); }
(rule__CastedExpression__CastTypeAssignment_2)
{ after(grammarAccess.getCastedExpressionAccess().getCastTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__3__Impl
	rule__CastedExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getCastedExprAssignment_4()); }
(rule__CastedExpression__CastedExprAssignment_4)
{ after(grammarAccess.getCastedExpressionAccess().getCastedExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTypeAction_0()); }
(

)
{ after(grammarAccess.getTypeAccess().getTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives_1()); }
(rule__Type__Alternatives_1)
{ after(grammarAccess.getTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayCreator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__0__Impl
	rule__ArrayCreator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getArrayCreatorAction_0()); }
(

)
{ after(grammarAccess.getArrayCreatorAccess().getArrayCreatorAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__1__Impl
	rule__ArrayCreator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getNewKeyword_1()); }

	'new' 

{ after(grammarAccess.getArrayCreatorAccess().getNewKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__2__Impl
	rule__ArrayCreator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getTypeAssignment_2()); }
(rule__ArrayCreator__TypeAssignment_2)
{ after(grammarAccess.getArrayCreatorAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getAlternatives_3()); }
(rule__ArrayCreator__Alternatives_3)
{ after(grammarAccess.getArrayCreatorAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayCreator__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_0__0__Impl
	rule__ArrayCreator__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_0_0()); }

	'[' 

{ after(grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_0__1__Impl
	rule__ArrayCreator__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getSizeAssignment_3_0_1()); }
(rule__ArrayCreator__SizeAssignment_3_0_1)
{ after(grammarAccess.getArrayCreatorAccess().getSizeAssignment_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group_3_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_0_2()); }

	']' 

{ after(grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayCreator__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_1__0__Impl
	rule__ArrayCreator__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup_3_1_0()); }
(rule__ArrayCreator__Group_3_1_0__0)
{ after(grammarAccess.getArrayCreatorAccess().getGroup_3_1_0()); }
)
(
{ before(grammarAccess.getArrayCreatorAccess().getGroup_3_1_0()); }
(rule__ArrayCreator__Group_3_1_0__0)*
{ after(grammarAccess.getArrayCreatorAccess().getGroup_3_1_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getInitializationAssignment_3_1_1()); }
(rule__ArrayCreator__InitializationAssignment_3_1_1)
{ after(grammarAccess.getArrayCreatorAccess().getInitializationAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayCreator__Group_3_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_1_0__0__Impl
	rule__ArrayCreator__Group_3_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_1_0_0()); }

	'[' 

{ after(grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayCreator__Group_3_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayCreator__Group_3_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__Group_3_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_1_0_1()); }

	']' 

{ after(grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayInitializer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__0__Impl
	rule__ArrayInitializer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
(

)
{ after(grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__1__Impl
	rule__ArrayInitializer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__2__Impl
	rule__ArrayInitializer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getInitializationAssignment_2()); }
(rule__ArrayInitializer__InitializationAssignment_2)?
{ after(grammarAccess.getArrayInitializerAccess().getInitializationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MethodInvocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__0__Impl
	rule__MethodInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getMethodInvocationAction_0()); }
(

)
{ after(grammarAccess.getMethodInvocationAccess().getMethodInvocationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__1__Impl
	rule__MethodInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameAssignment_1()); }
(rule__MethodInvocation__FullyQualifiedMethodNameAssignment_1)
{ after(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgsAssignment_2()); }
(rule__MethodInvocation__ArgsAssignment_2)
{ after(grammarAccess.getMethodInvocationAccess().getArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FullMethodName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullMethodName__Group__0__Impl
	rule__FullMethodName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getGroup_0()); }
(rule__FullMethodName__Group_0__0)*
{ after(grammarAccess.getFullMethodNameAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullMethodName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullMethodName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getMethodNameAssignment_1()); }
(rule__FullMethodName__MethodNameAssignment_1)
{ after(grammarAccess.getFullMethodNameAccess().getMethodNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FullMethodName__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullMethodName__Group_0__0__Impl
	rule__FullMethodName__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getPrefixQMNAssignment_0_0()); }
(rule__FullMethodName__PrefixQMNAssignment_0_0)
{ after(grammarAccess.getFullMethodNameAccess().getPrefixQMNAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullMethodName__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullMethodName__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getDotsAssignment_0_1()); }
(rule__FullMethodName__DotsAssignment_0_1)
{ after(grammarAccess.getFullMethodNameAccess().getDotsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Arguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__0__Impl
	rule__Arguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getArgumentsAction_0()); }
(

)
{ after(grammarAccess.getArgumentsAccess().getArgumentsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__1__Impl
	rule__Arguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__2__Impl
	rule__Arguments__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExprLstAssignment_2()); }
(rule__Arguments__ExprLstAssignment_2)?
{ after(grammarAccess.getArgumentsAccess().getExprLstAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arguments__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
(rule__ExpressionList__ExpressionsAssignment_0)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommasAssignment_1_0()); }
(rule__ExpressionList__CommasAssignment_1_0)
{ after(grammarAccess.getExpressionListAccess().getCommasAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
(rule__ExpressionList__ExpressionsAssignment_1_1)
{ after(grammarAccess.getExpressionListAccess().getExpressionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JvmTypeReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group__0__Impl
	rule__JvmTypeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0()); }
	ruleJvmParameterizedTypeReference
{ after(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmTypeReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getGroup_1()); }
(rule__JvmTypeReference__Group_1__0)*
{ after(grammarAccess.getJvmTypeReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JvmTypeReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getGroup_1_0()); }
(rule__JvmTypeReference__Group_1_0__0)
{ after(grammarAccess.getJvmTypeReferenceAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__JvmTypeReference__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group_1_0__0__Impl
	rule__JvmTypeReference__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0()); }
(

)
{ after(grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmTypeReference__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group_1_0__1__Impl
	rule__JvmTypeReference__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getLeftSquareBracketKeyword_1_0_1()); }

	'[' 

{ after(grammarAccess.getJvmTypeReferenceAccess().getLeftSquareBracketKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmTypeReference__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmTypeReference__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmTypeReference__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmTypeReferenceAccess().getRightSquareBracketKeyword_1_0_2()); }

	']' 

{ after(grammarAccess.getJvmTypeReferenceAccess().getRightSquareBracketKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JvmParameterizedTypeReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group__0__Impl
	rule__JvmParameterizedTypeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_0()); }
(rule__JvmParameterizedTypeReference__TypeAssignment_0)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmParameterizedTypeReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1()); }
(rule__JvmParameterizedTypeReference__Group_1__0)?
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JvmParameterizedTypeReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1__0__Impl
	rule__JvmParameterizedTypeReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0()); }
(
	'<' 
)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmParameterizedTypeReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1__1__Impl
	rule__JvmParameterizedTypeReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_1()); }
(rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_1)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmParameterizedTypeReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1__2__Impl
	rule__JvmParameterizedTypeReference__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_2()); }
(rule__JvmParameterizedTypeReference__Group_1_2__0)*
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmParameterizedTypeReference__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); }

	'>' 

{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__JvmParameterizedTypeReference__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1_2__0__Impl
	rule__JvmParameterizedTypeReference__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmParameterizedTypeReference__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmParameterizedTypeReference__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_2_1()); }
(rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_2_1)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JvmWildcardTypeReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmWildcardTypeReference__Group__0__Impl
	rule__JvmWildcardTypeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0()); }
(

)
{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmWildcardTypeReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmWildcardTypeReference__Group__1__Impl
	rule__JvmWildcardTypeReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1()); }

	'?' 

{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmWildcardTypeReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmWildcardTypeReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2()); }
(rule__JvmWildcardTypeReference__Alternatives_2)?
{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JvmUpperBound__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmUpperBound__Group__0__Impl
	rule__JvmUpperBound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmUpperBound__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0()); }

	'extends' 

{ after(grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmUpperBound__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmUpperBound__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmUpperBound__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceAssignment_1()); }
(rule__JvmUpperBound__TypeReferenceAssignment_1)
{ after(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JvmLowerBound__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmLowerBound__Group__0__Impl
	rule__JvmLowerBound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmLowerBound__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0()); }

	'super' 

{ after(grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JvmLowerBound__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JvmLowerBound__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JvmLowerBound__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceAssignment_1()); }
(rule__JvmLowerBound__TypeReferenceAssignment_1)
{ after(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__JRExpressionModel__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRExpressionModelAccess().getExpressionJasperReportsExpressionParserRuleCall_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getJRExpressionModelAccess().getExpressionJasperReportsExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__TrueStatementAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getTrueStatementJasperReportsExpressionParserRuleCall_1_1_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getConditionalExpressionAccess().getTrueStatementJasperReportsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalExpression__FalseStatementAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalExpressionAccess().getFalseStatementJasperReportsExpressionParserRuleCall_1_3_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getConditionalExpressionAccess().getFalseStatementJasperReportsExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_1_0()); }

	'||' 

{ after(grammarAccess.getConditionalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getConditionalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOrExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalOrExpressionAccess().getRightConditionalAndExpressionParserRuleCall_1_1_0()); }
	ruleConditionalAndExpression{ after(grammarAccess.getConditionalOrExpressionAccess().getRightConditionalAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_0_1_0()); }

	'&&' 

{ after(grammarAccess.getConditionalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getConditionalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalAndExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getConditionalAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
(rule__EqualityExpression__OpAlternatives_1_0_0_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRightInstanceofExpressionParserRuleCall_1_1_0()); }
	ruleInstanceofExpression{ after(grammarAccess.getEqualityExpressionAccess().getRightInstanceofExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getOpInstanceofKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getInstanceofExpressionAccess().getOpInstanceofKeyword_1_0_0_1_0()); }

	'instanceof' 

{ after(grammarAccess.getInstanceofExpressionAccess().getOpInstanceofKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getInstanceofExpressionAccess().getOpInstanceofKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstanceofExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceofExpressionAccess().getRightTypeParserRuleCall_1_1_0()); }
	ruleType{ after(grammarAccess.getInstanceofExpressionAccess().getRightTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); }
	ruleRelationalOp{ after(grammarAccess.getRelationalExpressionAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
(rule__AdditiveExpression__OpAlternatives_1_0_0_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
(rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__PrefixQMNAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getPrefixQMNValidIDParserRuleCall_1_0_0()); }
	ruleValidID{ after(grammarAccess.getStaticFieldAccess().getPrefixQMNValidIDParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__DotsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getDotsFullStopKeyword_1_1_0()); }
(
{ before(grammarAccess.getStaticFieldAccess().getDotsFullStopKeyword_1_1_0()); }

	'.' 

{ after(grammarAccess.getStaticFieldAccess().getDotsFullStopKeyword_1_1_0()); }
)

{ after(grammarAccess.getStaticFieldAccess().getDotsFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticField__FieldNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticFieldAccess().getFieldNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getStaticFieldAccess().getFieldNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRFieldObj__BracedIdentifierAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRFieldObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
	RULE_BRACED_IDENTIFIER{ after(grammarAccess.getJRFieldObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameterObj__BracedIdentifierAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
	RULE_BRACED_IDENTIFIER{ after(grammarAccess.getJRParameterObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRVariableObj__BracedIdentifierAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRVariableObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
	RULE_BRACED_IDENTIFIER{ after(grammarAccess.getJRVariableObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRResourceBundleKeyObj__BracedIdentifierAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRResourceBundleKeyObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
	RULE_BRACED_IDENTIFIER{ after(grammarAccess.getJRResourceBundleKeyObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__IncludeObjectInstatiationAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationNewKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationNewKeyword_1_0_0_0()); }

	'new' 

{ after(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationNewKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationNewKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__MethodInvocationsAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__MethodInvocationsAssignment_1_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__ObjectExpressionAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getObjectExpressionAlternatives_1_1_0_0()); }
(rule__MethodsExpression__ObjectExpressionAlternatives_1_1_0_0)
{ after(grammarAccess.getMethodsExpressionAccess().getObjectExpressionAlternatives_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__MethodInvocationsAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodsExpression__ArrayIndexesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodsExpressionAccess().getArrayIndexesIntLiteralParserRuleCall_2_1_0()); }
	ruleIntLiteral{ after(grammarAccess.getMethodsExpressionAccess().getArrayIndexesIntLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongLiteralAccess().getValueLONGTerminalRuleCall_1_0()); }
	RULE_LONG{ after(grammarAccess.getLongLiteralAccess().getValueLONGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
	RULE_FLOAT{ after(grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0()); }
	RULE_DOUBLE{ after(grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_1_0()); }
	RULE_CHAR{ after(grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__CastTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getCastTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getCastedExpressionAccess().getCastTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__CastedExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getCastedExprJasperReportsExpressionParserRuleCall_4_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getCastedExpressionAccess().getCastedExprJasperReportsExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__PrimitiveTypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0()); }
	rulePrimitiveType{ after(grammarAccess.getTypeAccess().getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__JvmTypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getJvmTypeJvmTypeReferenceParserRuleCall_1_1_0()); }
	ruleJvmTypeReference{ after(grammarAccess.getTypeAccess().getJvmTypeJvmTypeReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getArrayCreatorAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__SizeAssignment_3_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getSizeIntLiteralParserRuleCall_3_0_1_0()); }
	ruleIntLiteral{ after(grammarAccess.getArrayCreatorAccess().getSizeIntLiteralParserRuleCall_3_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayCreator__InitializationAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayCreatorAccess().getInitializationArrayInitializerParserRuleCall_3_1_1_0()); }
	ruleArrayInitializer{ after(grammarAccess.getArrayCreatorAccess().getInitializationArrayInitializerParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializer__InitializationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializerAccess().getInitializationExpressionListParserRuleCall_2_0()); }
	ruleExpressionList{ after(grammarAccess.getArrayInitializerAccess().getInitializationExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__FullyQualifiedMethodNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0()); }
	ruleFullMethodName{ after(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__ArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_2_0()); }
	ruleArguments{ after(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__PrefixQMNAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getPrefixQMNValidIDParserRuleCall_0_0_0()); }
	ruleValidID{ after(grammarAccess.getFullMethodNameAccess().getPrefixQMNValidIDParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__DotsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getDotsFullStopKeyword_0_1_0()); }
(
{ before(grammarAccess.getFullMethodNameAccess().getDotsFullStopKeyword_0_1_0()); }

	'.' 

{ after(grammarAccess.getFullMethodNameAccess().getDotsFullStopKeyword_0_1_0()); }
)

{ after(grammarAccess.getFullMethodNameAccess().getDotsFullStopKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FullMethodName__MethodNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullMethodNameAccess().getMethodNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getFullMethodNameAccess().getMethodNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__ExprLstAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_2_0()); }
	ruleExpressionList{ after(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_0_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__CommasAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommasCommaKeyword_1_0_0()); }
(
{ before(grammarAccess.getExpressionListAccess().getCommasCommaKeyword_1_0_0()); }

	',' 

{ after(grammarAccess.getExpressionListAccess().getCommasCommaKeyword_1_0_0()); }
)

{ after(grammarAccess.getExpressionListAccess().getCommasCommaKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__ExpressionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_1_1_0()); }
	ruleJasperReportsExpression{ after(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); }
	ruleJvmArgumentTypeReference{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); }
	ruleJvmArgumentTypeReference{ after(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); }
	ruleJvmUpperBound{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); }
	ruleJvmLowerBound{ after(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmUpperBound__TypeReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); }
	ruleJvmTypeReference{ after(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JvmLowerBound__TypeReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); }
	ruleJvmTypeReference{ after(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LONG : RULE_INTEGERNUMBER RULE_LONGSUFFIX;

RULE_INT : RULE_INTEGERNUMBER;

RULE_FLOAT : RULE_NONINTEGERNUMBER RULE_FLOATSUFFIX;

RULE_DOUBLE : RULE_NONINTEGERNUMBER RULE_DOUBLESUFFIX?;

RULE_CHAR : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'|'\r'|'\n'))) '\'';

RULE_STRING : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"'|'\r'|'\n')))* '"';

fragment RULE_ESCAPESEQUENCE : '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'0'..'3' '0'..'7' '0'..'7'|'0'..'7' '0'..'7'|'0'..'7'|'u' RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT);

fragment RULE_INTEGERNUMBER : ('0'|'1'..'9' ('0'..'9')*|'0' ('0'..'7')+|RULE_HEXPREFIX RULE_HEXDIGIT+);

fragment RULE_HEXPREFIX : ('0x'|'0X');

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_LONGSUFFIX : ('l'|'L');

fragment RULE_NONINTEGERNUMBER : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT|('0'..'9')+|RULE_HEXPREFIX RULE_HEXDIGIT* '.' RULE_HEXDIGIT* ('p'|'P') ('+'|'-')? ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATSUFFIX : ('f'|'F');

fragment RULE_DOUBLESUFFIX : ('d'|'D');

RULE_BRACED_IDENTIFIER : '{' RULE_EXPOBJIDENTIFIER '}';

fragment RULE_EXPOBJIDENTIFIER : ~(('\r'|'\n'|'}'))+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


