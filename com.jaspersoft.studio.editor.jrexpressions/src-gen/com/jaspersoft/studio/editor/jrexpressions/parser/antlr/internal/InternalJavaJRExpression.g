/*
* generated by Xtext
*/
grammar InternalJavaJRExpression;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.jaspersoft.studio.editor.jrexpressions.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.jaspersoft.studio.editor.jrexpressions.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.jaspersoft.studio.editor.jrexpressions.services.JavaJRExpressionGrammarAccess;

}

@parser::members {

 	private JavaJRExpressionGrammarAccess grammarAccess;
 	
    public InternalJavaJRExpressionParser(TokenStream input, JavaJRExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "JRExpressionModel";	
   	}
   	
   	@Override
   	protected JavaJRExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleJRExpressionModel
entryRuleJRExpressionModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJRExpressionModelRule()); }
	 iv_ruleJRExpressionModel=ruleJRExpressionModel 
	 { $current=$iv_ruleJRExpressionModel.current; } 
	 EOF 
;

// Rule JRExpressionModel
ruleJRExpressionModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getJRExpressionModelAccess().getExpressionJasperReportsExpressionParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJRExpressionModelRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleJasperReportsExpression
entryRuleJasperReportsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJasperReportsExpressionRule()); }
	 iv_ruleJasperReportsExpression=ruleJasperReportsExpression 
	 { $current=$iv_ruleJasperReportsExpression.current; } 
	 EOF 
;

// Rule JasperReportsExpression
ruleJasperReportsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getJasperReportsExpressionAccess().getConditionalExpressionParserRuleCall()); 
    }
    this_ConditionalExpression_0=ruleConditionalExpression
    { 
        $current = $this_ConditionalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionalOrExpressionParserRuleCall_0()); 
    }
    this_ConditionalOrExpression_0=ruleConditionalOrExpression
    { 
        $current = $this_ConditionalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'?' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalExpressionAccess().getTestExpressionConditionAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTrueStatementJasperReportsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_trueStatement_3_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"trueStatement",
        		lv_trueStatement_3_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFalseStatementJasperReportsExpressionParserRuleCall_1_3_0()); 
	    }
		lv_falseStatement_5_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
	        }
       		set(
       			$current, 
       			"falseStatement",
        		lv_falseStatement_5_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalOrExpressionRule()); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getConditionalAndExpressionParserRuleCall_0()); 
    }
    this_ConditionalAndExpression_0=ruleConditionalAndExpression
    { 
        $current = $this_ConditionalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'||' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalOrExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getConditionalOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalOrExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getRightConditionalAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ConditionalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalAndExpressionRule()); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'&&' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionalAndExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getConditionalAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&&");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getInstanceofExpressionParserRuleCall_0()); 
    }
    this_InstanceofExpression_0=ruleInstanceofExpression
    { 
        $current = $this_InstanceofExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'==' 
 

    |			'!=' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightInstanceofExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleInstanceofExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"InstanceofExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceofExpression
entryRuleInstanceofExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceofExpressionRule()); }
	 iv_ruleInstanceofExpression=ruleInstanceofExpression 
	 { $current=$iv_ruleInstanceofExpression.current; } 
	 EOF 
;

// Rule InstanceofExpression
ruleInstanceofExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstanceofExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'instanceof' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInstanceofExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'instanceof' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getInstanceofExpressionAccess().getOpInstanceofKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceofExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "instanceof");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceofExpressionAccess().getRightTypeParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceofExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'*' 
 

    |			'/' 
 

    |			'%' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getBinaryExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionAccess().getPlusSignKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_UnaryExpression_1=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_UnaryExpression_3=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionNotPlusMinusParserRuleCall_2()); 
    }
    this_UnaryExpressionNotPlusMinus_4=ruleUnaryExpressionNotPlusMinus
    { 
        $current = $this_UnaryExpressionNotPlusMinus_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryExpressionNotPlusMinus
entryRuleUnaryExpressionNotPlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusRule()); }
	 iv_ruleUnaryExpressionNotPlusMinus=ruleUnaryExpressionNotPlusMinus 
	 { $current=$iv_ruleUnaryExpressionNotPlusMinus.current; } 
	 EOF 
;

// Rule UnaryExpressionNotPlusMinus
ruleUnaryExpressionNotPlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getTildeKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_0_1()); 
    }
    this_UnaryExpression_1=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryExpressionNotPlusMinusAccess().getExclamationMarkKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getUnaryExpressionParserRuleCall_1_1()); 
    }
    this_UnaryExpression_3=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleCastedExpression)=>
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getCastedExpressionParserRuleCall_2()); 
    }
    this_CastedExpression_4=ruleCastedExpression
    { 
        $current = $this_CastedExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionNotPlusMinusAccess().getPrimaryExpressionParserRuleCall_3()); 
    }
    this_PrimaryExpression_5=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParExpressionParserRuleCall_0()); 
    }
    this_ParExpression_0=ruleParExpression
    { 
        $current = $this_ParExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); 
    }
    this_LiteralExpression_1=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayCreatorParserRuleCall_2()); 
    }
    this_ArrayCreator_2=ruleArrayCreator
    { 
        $current = $this_ArrayCreator_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleBaseJRExpression)=>
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBaseJRExpressionParserRuleCall_3()); 
    }
    this_BaseJRExpression_3=ruleBaseJRExpression
    { 
        $current = $this_BaseJRExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMethodsExpressionParserRuleCall_4()); 
    }
    this_MethodsExpression_4=ruleMethodsExpression
    { 
        $current = $this_MethodsExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getStaticFieldParserRuleCall_5()); 
    }
    this_StaticField_5=ruleStaticField
    { 
        $current = $this_StaticField_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStaticField
entryRuleStaticField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticFieldRule()); }
	 iv_ruleStaticField=ruleStaticField 
	 { $current=$iv_ruleStaticField.current; } 
	 EOF 
;

// Rule StaticField
ruleStaticField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStaticFieldAccess().getStaticFieldAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getStaticFieldAccess().getPrefixQMNValidIDParserRuleCall_1_0_0()); 
	    }
		lv_prefixQMN_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticFieldRule());
	        }
       		add(
       			$current, 
       			"prefixQMN",
        		lv_prefixQMN_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_dots_2_0=	'.' 
    {
        newLeafNode(lv_dots_2_0, grammarAccess.getStaticFieldAccess().getDotsFullStopKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStaticFieldRule());
	        }
       		addWithLastConsumed($current, "dots", lv_dots_2_0, ".");
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticFieldAccess().getFieldNameValidIDParserRuleCall_2_0()); 
	    }
		lv_fieldName_3_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticFieldRule());
	        }
       		set(
       			$current, 
       			"fieldName",
        		lv_fieldName_3_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBaseJRExpression
entryRuleBaseJRExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseJRExpressionRule()); }
	 iv_ruleBaseJRExpression=ruleBaseJRExpression 
	 { $current=$iv_ruleBaseJRExpression.current; } 
	 EOF 
;

// Rule BaseJRExpression
ruleBaseJRExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseJRExpressionAccess().getJRFieldObjParserRuleCall_0()); 
    }
    this_JRFieldObj_0=ruleJRFieldObj
    { 
        $current = $this_JRFieldObj_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseJRExpressionAccess().getJRParameterObjParserRuleCall_1()); 
    }
    this_JRParameterObj_1=ruleJRParameterObj
    { 
        $current = $this_JRParameterObj_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseJRExpressionAccess().getJRVariableObjParserRuleCall_2()); 
    }
    this_JRVariableObj_2=ruleJRVariableObj
    { 
        $current = $this_JRVariableObj_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseJRExpressionAccess().getJRResourceBundleKeyObjParserRuleCall_3()); 
    }
    this_JRResourceBundleKeyObj_3=ruleJRResourceBundleKeyObj
    { 
        $current = $this_JRResourceBundleKeyObj_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJRFieldObj
entryRuleJRFieldObj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJRFieldObjRule()); }
	 iv_ruleJRFieldObj=ruleJRFieldObj 
	 { $current=$iv_ruleJRFieldObj.current; } 
	 EOF 
;

// Rule JRFieldObj
ruleJRFieldObj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJRFieldObjAccess().getJRFieldObjAction_0(),
            $current);
    }
)	otherlv_1='$F' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJRFieldObjAccess().getFKeyword_1());
    }
(
(
		lv_bracedIdentifier_2_0=RULE_BRACED_IDENTIFIER
		{
			newLeafNode(lv_bracedIdentifier_2_0, grammarAccess.getJRFieldObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJRFieldObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bracedIdentifier",
        		lv_bracedIdentifier_2_0, 
        		"BRACED_IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleJRParameterObj
entryRuleJRParameterObj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJRParameterObjRule()); }
	 iv_ruleJRParameterObj=ruleJRParameterObj 
	 { $current=$iv_ruleJRParameterObj.current; } 
	 EOF 
;

// Rule JRParameterObj
ruleJRParameterObj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJRParameterObjAccess().getJRParameterObjAction_0(),
            $current);
    }
)	otherlv_1='$P' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJRParameterObjAccess().getPKeyword_1());
    }
(
(
		lv_bracedIdentifier_2_0=RULE_BRACED_IDENTIFIER
		{
			newLeafNode(lv_bracedIdentifier_2_0, grammarAccess.getJRParameterObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJRParameterObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bracedIdentifier",
        		lv_bracedIdentifier_2_0, 
        		"BRACED_IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleJRVariableObj
entryRuleJRVariableObj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJRVariableObjRule()); }
	 iv_ruleJRVariableObj=ruleJRVariableObj 
	 { $current=$iv_ruleJRVariableObj.current; } 
	 EOF 
;

// Rule JRVariableObj
ruleJRVariableObj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJRVariableObjAccess().getJRVariableObjAction_0(),
            $current);
    }
)	otherlv_1='$V' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJRVariableObjAccess().getVKeyword_1());
    }
(
(
		lv_bracedIdentifier_2_0=RULE_BRACED_IDENTIFIER
		{
			newLeafNode(lv_bracedIdentifier_2_0, grammarAccess.getJRVariableObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJRVariableObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bracedIdentifier",
        		lv_bracedIdentifier_2_0, 
        		"BRACED_IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleJRResourceBundleKeyObj
entryRuleJRResourceBundleKeyObj returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJRResourceBundleKeyObjRule()); }
	 iv_ruleJRResourceBundleKeyObj=ruleJRResourceBundleKeyObj 
	 { $current=$iv_ruleJRResourceBundleKeyObj.current; } 
	 EOF 
;

// Rule JRResourceBundleKeyObj
ruleJRResourceBundleKeyObj returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJRResourceBundleKeyObjAccess().getJRResourceBundleKeyObjAction_0(),
            $current);
    }
)	otherlv_1='$R' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJRResourceBundleKeyObjAccess().getRKeyword_1());
    }
(
(
		lv_bracedIdentifier_2_0=RULE_BRACED_IDENTIFIER
		{
			newLeafNode(lv_bracedIdentifier_2_0, grammarAccess.getJRResourceBundleKeyObjAccess().getBracedIdentifierBRACED_IDENTIFIERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJRResourceBundleKeyObjRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bracedIdentifier",
        		lv_bracedIdentifier_2_0, 
        		"BRACED_IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleMethodsExpression
entryRuleMethodsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodsExpressionRule()); }
	 iv_ruleMethodsExpression=ruleMethodsExpression 
	 { $current=$iv_ruleMethodsExpression.current; } 
	 EOF 
;

// Rule MethodsExpression
ruleMethodsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodsExpressionAccess().getMethodsExpressionAction_0(),
            $current);
    }
)(((
(
		lv_includeObjectInstatiation_1_0=	'new' 
    {
        newLeafNode(lv_includeObjectInstatiation_1_0, grammarAccess.getMethodsExpressionAccess().getIncludeObjectInstatiationNewKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodsExpressionRule());
	        }
       		setWithLastConsumed($current, "includeObjectInstatiation", true, "new");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_1_0()); 
	    }
		lv_methodInvocations_2_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		add(
       			$current, 
       			"methodInvocations",
        		lv_methodInvocations_2_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_0_2_1_0()); 
	    }
		lv_methodInvocations_4_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		add(
       			$current, 
       			"methodInvocations",
        		lv_methodInvocations_4_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |((
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getObjectExpressionBaseJRExpressionParserRuleCall_1_1_0_0_0()); 
	    }
		lv_objectExpression_5_1=ruleBaseJRExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		set(
       			$current, 
       			"objectExpression",
        		lv_objectExpression_5_1, 
        		"BaseJRExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getObjectExpressionStringLiteralParserRuleCall_1_1_0_0_1()); 
	    }
		lv_objectExpression_5_2=ruleStringLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		set(
       			$current, 
       			"objectExpression",
        		lv_objectExpression_5_2, 
        		"StringLiteral");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodsExpressionAccess().getFullStopKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getMethodInvocationsMethodInvocationParserRuleCall_1_1_1_1_0()); 
	    }
		lv_methodInvocations_7_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		add(
       			$current, 
       			"methodInvocations",
        		lv_methodInvocations_7_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
))+))(	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodsExpressionAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodsExpressionAccess().getArrayIndexesIntLiteralParserRuleCall_2_1_0()); 
	    }
		lv_arrayIndexes_9_0=ruleIntLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodsExpressionRule());
	        }
       		add(
       			$current, 
       			"arrayIndexes",
        		lv_arrayIndexes_9_0, 
        		"IntLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodsExpressionAccess().getRightSquareBracketKeyword_2_2());
    }
)*)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getIntLiteralParserRuleCall_0()); 
    }
    this_IntLiteral_0=ruleIntLiteral
    { 
        $current = $this_IntLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLongLiteralParserRuleCall_1()); 
    }
    this_LongLiteral_1=ruleLongLiteral
    { 
        $current = $this_LongLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getFloatLiteralParserRuleCall_2()); 
    }
    this_FloatLiteral_2=ruleFloatLiteral
    { 
        $current = $this_FloatLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getDoubleLiteralParserRuleCall_3()); 
    }
    this_DoubleLiteral_3=ruleDoubleLiteral
    { 
        $current = $this_DoubleLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getCharLiteralParserRuleCall_4()); 
    }
    this_CharLiteral_4=ruleCharLiteral
    { 
        $current = $this_CharLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getStringLiteralParserRuleCall_5()); 
    }
    this_StringLiteral_5=ruleStringLiteral
    { 
        $current = $this_StringLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralParserRuleCall_6()); 
    }
    this_BooleanLiteral_6=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getNullLiteralParserRuleCall_7()); 
    }
    this_NullLiteral_7=ruleNullLiteral
    { 
        $current = $this_NullLiteral_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntLiteralAccess().getIntLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleLongLiteral
entryRuleLongLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLongLiteralRule()); }
	 iv_ruleLongLiteral=ruleLongLiteral 
	 { $current=$iv_ruleLongLiteral.current; } 
	 EOF 
;

// Rule LongLiteral
ruleLongLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLongLiteralAccess().getLongLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_LONG
		{
			newLeafNode(lv_value_1_0, grammarAccess.getLongLiteralAccess().getValueLONGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLongLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"LONG");
	    }

)
))
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFloatLiteralAccess().getFloatLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_FLOAT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"FLOAT");
	    }

)
))
;





// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	 iv_ruleDoubleLiteral=ruleDoubleLiteral 
	 { $current=$iv_ruleDoubleLiteral.current; } 
	 EOF 
;

// Rule DoubleLiteral
ruleDoubleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDoubleLiteralAccess().getDoubleLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_1_0, grammarAccess.getDoubleLiteralAccess().getValueDOUBLETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"DOUBLE");
	    }

)
))
;





// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); }
	 iv_ruleCharLiteral=ruleCharLiteral 
	 { $current=$iv_ruleCharLiteral.current; } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCharLiteralAccess().getCharLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_CHAR
		{
			newLeafNode(lv_value_1_0, grammarAccess.getCharLiteralAccess().getValueCHARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"CHAR");
	    }

)
))
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParExpressionAccess().getJasperReportsExpressionParserRuleCall_1()); 
    }
    this_JasperReportsExpression_1=ruleJasperReportsExpression
    { 
        $current = $this_JasperReportsExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleCastedExpression
entryRuleCastedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastedExpressionRule()); }
	 iv_ruleCastedExpression=ruleCastedExpression 
	 { $current=$iv_ruleCastedExpression.current; } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCastedExpressionAccess().getCastedExpressionAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastedExpressionAccess().getCastTypeTypeParserRuleCall_2_0()); 
	    }
		lv_castType_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"castType",
        		lv_castType_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastedExpressionAccess().getCastedExprJasperReportsExpressionParserRuleCall_4_0()); 
	    }
		lv_castedExpr_4_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"castedExpr",
        		lv_castedExpr_4_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getTypeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0()); 
	    }
		lv_primitiveType_1_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"primitiveType",
        		true, 
        		"PrimitiveType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getJvmTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_jvmType_2_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"jvmType",
        		lv_jvmType_2_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleArrayCreator
entryRuleArrayCreator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayCreatorRule()); }
	 iv_ruleArrayCreator=ruleArrayCreator 
	 { $current=$iv_ruleArrayCreator.current; } 
	 EOF 
;

// Rule ArrayCreator
ruleArrayCreator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayCreatorAccess().getArrayCreatorAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayCreatorAccess().getNewKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayCreatorAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayCreatorRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayCreatorAccess().getSizeIntLiteralParserRuleCall_3_0_1_0()); 
	    }
		lv_size_4_0=ruleIntLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayCreatorRule());
	        }
       		add(
       			$current, 
       			"size",
        		lv_size_4_0, 
        		"IntLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_0_2());
    }
)+
    |((	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayCreatorAccess().getLeftSquareBracketKeyword_3_1_0_0());
    }
	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArrayCreatorAccess().getRightSquareBracketKeyword_3_1_0_1());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayCreatorAccess().getInitializationArrayInitializerParserRuleCall_3_1_1_0()); 
	    }
		lv_initialization_8_0=ruleArrayInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayCreatorRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_8_0, 
        		"ArrayInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializerRule()); }
	 iv_ruleArrayInitializer=ruleArrayInitializer 
	 { $current=$iv_ruleArrayInitializer.current; } 
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayInitializerAccess().getArrayInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getInitializationExpressionListParserRuleCall_2_0()); 
	    }
		lv_initialization_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodInvocationRule()); }
	 iv_ruleMethodInvocation=ruleMethodInvocation 
	 { $current=$iv_ruleMethodInvocation.current; } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodInvocationAccess().getMethodInvocationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getFullyQualifiedMethodNameFullMethodNameParserRuleCall_1_0()); 
	    }
		lv_fullyQualifiedMethodName_1_0=ruleFullMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"fullyQualifiedMethodName",
        		lv_fullyQualifiedMethodName_1_0, 
        		"FullMethodName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getArgsArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullMethodName
entryRuleFullMethodName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFullMethodNameRule()); }
	 iv_ruleFullMethodName=ruleFullMethodName 
	 { $current=$iv_ruleFullMethodName.current; } 
	 EOF 
;

// Rule FullMethodName
ruleFullMethodName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFullMethodNameAccess().getPrefixQMNValidIDParserRuleCall_0_0_0()); 
	    }
		lv_prefixQMN_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullMethodNameRule());
	        }
       		add(
       			$current, 
       			"prefixQMN",
        		lv_prefixQMN_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_dots_1_0=	'.' 
    {
        newLeafNode(lv_dots_1_0, grammarAccess.getFullMethodNameAccess().getDotsFullStopKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFullMethodNameRule());
	        }
       		addWithLastConsumed($current, "dots", lv_dots_1_0, ".");
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFullMethodNameAccess().getMethodNameValidIDParserRuleCall_1_0()); 
	    }
		lv_methodName_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullMethodNameRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getArgumentsAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExprLstExpressionListParserRuleCall_2_0()); 
	    }
		lv_exprLst_2_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		set(
       			$current, 
       			"exprLst",
        		lv_exprLst_2_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_commas_1_0=	',' 
    {
        newLeafNode(lv_commas_1_0, grammarAccess.getExpressionListAccess().getCommasCommaKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionListRule());
	        }
       		addWithLastConsumed($current, "commas", lv_commas_1_0, ",");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionsJasperReportsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleJasperReportsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"JasperReportsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    { 
        $current = $this_JvmParameterizedTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	'[' 
	']' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJvmTypeReferenceAccess().getLeftSquareBracketKeyword_1_0_1());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmTypeReferenceAccess().getRightSquareBracketKeyword_1_0_2());
    }
))*)
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    { 
        $current = $this_JvmTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    { 
        $current = $this_JvmWildcardTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); } 
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current.getText(); }  
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getBooleanKeyword_0()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getCharKeyword_1()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getByteKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getIntKeyword_4()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getLongKeyword_5()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getFloatKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveTypeAccess().getDoubleKeyword_7()); 
    }
)
    ;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_0()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





RULE_LONG : RULE_INTEGERNUMBER RULE_LONGSUFFIX;

RULE_INT : RULE_INTEGERNUMBER;

RULE_FLOAT : RULE_NONINTEGERNUMBER RULE_FLOATSUFFIX;

RULE_DOUBLE : RULE_NONINTEGERNUMBER RULE_DOUBLESUFFIX?;

RULE_CHAR : '\'' (RULE_ESCAPESEQUENCE|~(('\''|'\\'|'\r'|'\n'))) '\'';

RULE_STRING : '"' (RULE_ESCAPESEQUENCE|~(('\\'|'"'|'\r'|'\n')))* '"';

fragment RULE_ESCAPESEQUENCE : '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\'|'0'..'3' '0'..'7' '0'..'7'|'0'..'7' '0'..'7'|'0'..'7'|'u' RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT RULE_HEXDIGIT);

fragment RULE_INTEGERNUMBER : ('0'|'1'..'9' ('0'..'9')*|'0' ('0'..'7')+|RULE_HEXPREFIX RULE_HEXDIGIT+);

fragment RULE_HEXPREFIX : ('0x'|'0X');

fragment RULE_HEXDIGIT : ('0'..'9'|'a'..'f'|'A'..'F');

fragment RULE_LONGSUFFIX : ('l'|'L');

fragment RULE_NONINTEGERNUMBER : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT?|'.' ('0'..'9')+ RULE_EXPONENT?|('0'..'9')+ RULE_EXPONENT|('0'..'9')+|RULE_HEXPREFIX RULE_HEXDIGIT* '.' RULE_HEXDIGIT* ('p'|'P') ('+'|'-')? ('0'..'9')+);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATSUFFIX : ('f'|'F');

fragment RULE_DOUBLESUFFIX : ('d'|'D');

RULE_BRACED_IDENTIFIER : '{' RULE_EXPOBJIDENTIFIER '}';

fragment RULE_EXPOBJIDENTIFIER : ~(('\r'|'\n'|'}'))+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


