module com.jaspersoft.studio.editor.jrexpressions.GenerateJavaJRExpression

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var javaJRExprGrammarURI = "classpath:/com/jaspersoft/studio/editor/jrexpressions/JavaJRExpression.xtext"
var javaJRExpr.file.extensions = "__javajrexpr"
var projectName = "com.jaspersoft.studio.editor.jrexpressions"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		// registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
         registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
        // registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        // registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
        
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		// Use custom activator in order to have a common share one between potential multiple languages
		// For example: a new language for Groovy will probably be added in the future.
		activator="com.jaspersoft.studio.editor.jrexpressions.ui.JRExpressionsActivator"	
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
//		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
				
		// Java-like language support for JasperReports Expressions
		// In order to add the Groovy support we'll need to create another element language 
		// with the right references to the Groovy grammar and file extension
		language = {
			uri = javaJRExprGrammarURI
			fileExtensions = javaJRExpr.file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = javaJRExpr.file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//		backtrack = true
			//	}
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

//			// generator API
//			fragment = generator.GeneratorFragment {
//				generateMwe = true
//				generateJavaMain = true
//			}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

//			// outline API 
//			fragment = outline.OutlineTreeProviderFragment {}
//			fragment = outline.QuickOutlineFragment {}

//			// quickfix API 
//			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

//			// generates junit test support classes into Generator#pathTestProject
//			fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}"
			//		modelFileExtension = file.extensions
			// }

			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment {}

//			// generates the required bindings only if the grammar inherits from Xbase
//			fragment = xbase.XbaseGeneratorFragment {}
			
//			// provides a preference page for template proposals 
//			fragment = templates.CodetemplatesGeneratorFragment {}

			// rename refactoring
            // fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            // fragment = compare.CompareFragment {
            //    fileExtensions = file.extensions
            // }

            // Serializer 2.0
            // fragment = serializer.SerializerFragment {}
		}
	}
}
