/*
* generated by Xtext
*/
parser grammar InternalSqlParser;

options {
	tokenVocab=InternalSqlLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package com.jaspersoft.studio.data.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@members {
 
 	private SqlGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("KEYWORD_1", "'('");
		tokenNameToValue.put("KEYWORD_2", "')'");
		tokenNameToValue.put("KEYWORD_3", "'+'");
		tokenNameToValue.put("KEYWORD_4", "','");
		tokenNameToValue.put("KEYWORD_5", "'-'");
		tokenNameToValue.put("KEYWORD_6", "'.'");
		tokenNameToValue.put("KEYWORD_7", "'/'");
		tokenNameToValue.put("KEYWORD_8", "'<'");
		tokenNameToValue.put("KEYWORD_9", "'='");
		tokenNameToValue.put("KEYWORD_10", "'>'");
		tokenNameToValue.put("KEYWORD_11", "'{'");
		tokenNameToValue.put("KEYWORD_12", "'|'");
		tokenNameToValue.put("KEYWORD_13", "'}'");
		tokenNameToValue.put("KEYWORD_14", "'\u0024X'");
		tokenNameToValue.put("KEYWORD_15", "'<='");
		tokenNameToValue.put("KEYWORD_16", "'<>'");
		tokenNameToValue.put("KEYWORD_17", "'>='");
		tokenNameToValue.put("KEYWORD_18", "'AS'");
		tokenNameToValue.put("KEYWORD_19", "'IN'");
		tokenNameToValue.put("KEYWORD_20", "'ON'");
		tokenNameToValue.put("KEYWORD_21", "'OR'");
		tokenNameToValue.put("KEYWORD_22", "'||'");
		tokenNameToValue.put("KEYWORD_23", "'ALL'");
		tokenNameToValue.put("KEYWORD_24", "'AND'");
		tokenNameToValue.put("KEYWORD_25", "'ANY'");
		tokenNameToValue.put("KEYWORD_26", "'ASC'");
		tokenNameToValue.put("KEYWORD_27", "'END'");
		tokenNameToValue.put("KEYWORD_28", "'TOP'");
		tokenNameToValue.put("KEYWORD_29", "'CASE'");
		tokenNameToValue.put("KEYWORD_30", "'DESC'");
		tokenNameToValue.put("KEYWORD_31", "'ELSE'");
		tokenNameToValue.put("KEYWORD_32", "'FROM'");
		tokenNameToValue.put("KEYWORD_33", "'FULL'");
		tokenNameToValue.put("KEYWORD_34", "'JOIN'");
		tokenNameToValue.put("KEYWORD_35", "'LEFT'");
		tokenNameToValue.put("KEYWORD_36", "'LESS'");
		tokenNameToValue.put("KEYWORD_37", "'LIKE'");
		tokenNameToValue.put("KEYWORD_38", "'SOME'");
		tokenNameToValue.put("KEYWORD_39", "'THEN'");
		tokenNameToValue.put("KEYWORD_40", "'WHEN'");
		tokenNameToValue.put("KEYWORD_41", "'CAST('");
		tokenNameToValue.put("KEYWORD_42", "'CROSS'");
		tokenNameToValue.put("KEYWORD_43", "'EQUAL'");
		tokenNameToValue.put("KEYWORD_44", "'INNER'");
		tokenNameToValue.put("KEYWORD_45", "'LESS]'");
		tokenNameToValue.put("KEYWORD_46", "'LIMIT'");
		tokenNameToValue.put("KEYWORD_47", "'MINUS'");
		tokenNameToValue.put("KEYWORD_48", "'NOTIN'");
		tokenNameToValue.put("KEYWORD_49", "'OUTER'");
		tokenNameToValue.put("KEYWORD_50", "'RIGHT'");
		tokenNameToValue.put("KEYWORD_51", "'UNION'");
		tokenNameToValue.put("KEYWORD_52", "'WHERE'");
		tokenNameToValue.put("KEYWORD_53", "'EXCEPT'");
		tokenNameToValue.put("KEYWORD_54", "'HAVING'");
		tokenNameToValue.put("KEYWORD_55", "'NOT IN'");
		tokenNameToValue.put("KEYWORD_56", "'OFFSET'");
		tokenNameToValue.put("KEYWORD_57", "'SELECT'");
		tokenNameToValue.put("KEYWORD_58", "'BETWEEN'");
		tokenNameToValue.put("KEYWORD_59", "'GREATER'");
		tokenNameToValue.put("KEYWORD_60", "'IS NULL'");
		tokenNameToValue.put("KEYWORD_61", "'NATURAL'");
		tokenNameToValue.put("KEYWORD_62", "'PERCENT'");
		tokenNameToValue.put("KEYWORD_63", "'BETWEEN]'");
		tokenNameToValue.put("KEYWORD_64", "'DISTINCT'");
		tokenNameToValue.put("KEYWORD_65", "'GROUP BY'");
		tokenNameToValue.put("KEYWORD_66", "'NOT LIKE'");
		tokenNameToValue.put("KEYWORD_67", "'NOTEQUAL'");
		tokenNameToValue.put("KEYWORD_68", "'ORDER BY'");
		tokenNameToValue.put("KEYWORD_69", "'[BETWEEN'");
		tokenNameToValue.put("KEYWORD_70", "'[GREATER'");
		tokenNameToValue.put("KEYWORD_71", "'INTERSECT'");
		tokenNameToValue.put("KEYWORD_72", "'ROWS ONLY'");
		tokenNameToValue.put("KEYWORD_73", "'WITH TIES'");
		tokenNameToValue.put("KEYWORD_74", "'[BETWEEN]'");
		tokenNameToValue.put("KEYWORD_75", "'FETCH FIRST'");
		tokenNameToValue.put("KEYWORD_76", "'IS NOT NULL'");
		tokenNameToValue.put("KEYWORD_77", "'NOT BETWEEN'");
 	}
 	
    public void setGrammarAccess(SqlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectQuery
entryRuleSelectQuery 
:
{ before(grammarAccess.getSelectQueryRule()); }
	 ruleSelectQuery
{ after(grammarAccess.getSelectQueryRule()); } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectQueryAccess().getGroup()); }
(rule__SelectQuery__Group__0)
{ after(grammarAccess.getSelectQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectSubSet
entryRuleSelectSubSet 
:
{ before(grammarAccess.getSelectSubSetRule()); }
	 ruleSelectSubSet
{ after(grammarAccess.getSelectSubSetRule()); } 
	 EOF 
;

// Rule SelectSubSet
ruleSelectSubSet 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectSubSetAccess().getGroup()); }
(rule__SelectSubSet__Group__0)
{ after(grammarAccess.getSelectSubSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelect
entryRuleSelect 
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectAccess().getGroup()); }
(rule__Select__Group__0)
{ after(grammarAccess.getSelectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumns
entryRuleColumns 
:
{ before(grammarAccess.getColumnsRule()); }
	 ruleColumns
{ after(grammarAccess.getColumnsRule()); } 
	 EOF 
;

// Rule Columns
ruleColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnsAccess().getGroup()); }
(rule__Columns__Group__0)
{ after(grammarAccess.getColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias 
:
{ before(grammarAccess.getColumnOrAliasRule()); }
	 ruleColumnOrAlias
{ after(grammarAccess.getColumnOrAliasRule()); } 
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
(rule__ColumnOrAlias__Alternatives)
{ after(grammarAccess.getColumnOrAliasAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnFull
entryRuleColumnFull 
:
{ before(grammarAccess.getColumnFullRule()); }
	 ruleColumnFull
{ after(grammarAccess.getColumnFullRule()); } 
	 EOF 
;

// Rule ColumnFull
ruleColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnFullAccess().getGroup()); }
(rule__ColumnFull__Group__0)
{ after(grammarAccess.getColumnFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTables
entryRuleTables 
:
{ before(grammarAccess.getTablesRule()); }
	 ruleTables
{ after(grammarAccess.getTablesRule()); } 
	 EOF 
;

// Rule Tables
ruleTables 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTablesAccess().getGroup()); }
(rule__Tables__Group__0)
{ after(grammarAccess.getTablesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromTable
entryRuleFromTable 
:
{ before(grammarAccess.getFromTableRule()); }
	 ruleFromTable
{ after(grammarAccess.getFromTableRule()); } 
	 EOF 
;

// Rule FromTable
ruleFromTable 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromTableAccess().getGroup()); }
(rule__FromTable__Group__0)
{ after(grammarAccess.getFromTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFromTableJoin
entryRuleFromTableJoin 
:
{ before(grammarAccess.getFromTableJoinRule()); }
	 ruleFromTableJoin
{ after(grammarAccess.getFromTableJoinRule()); } 
	 EOF 
;

// Rule FromTableJoin
ruleFromTableJoin 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFromTableJoinAccess().getGroup()); }
(rule__FromTableJoin__Group__0)
{ after(grammarAccess.getFromTableJoinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableOrAlias
entryRuleTableOrAlias 
:
{ before(grammarAccess.getTableOrAliasRule()); }
	 ruleTableOrAlias
{ after(grammarAccess.getTableOrAliasRule()); } 
	 EOF 
;

// Rule TableOrAlias
ruleTableOrAlias 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTableOrAliasAccess().getGroup()); }
(rule__TableOrAlias__Group__0)
{ after(grammarAccess.getTableOrAliasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableFull
entryRuleTableFull 
:
{ before(grammarAccess.getTableFullRule()); }
	 ruleTableFull
{ after(grammarAccess.getTableFullRule()); } 
	 EOF 
;

// Rule TableFull
ruleTableFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTableFullAccess().getGroup()); }
(rule__TableFull__Group__0)
{ after(grammarAccess.getTableFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDbObjectNameAll
entryRuleDbObjectNameAll 
:
{ before(grammarAccess.getDbObjectNameAllRule()); }
	 ruleDbObjectNameAll
{ after(grammarAccess.getDbObjectNameAllRule()); } 
	 EOF 
;

// Rule DbObjectNameAll
ruleDbObjectNameAll 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDbObjectNameAllAccess().getGroup()); }
(rule__DbObjectNameAll__Group__0)
{ after(grammarAccess.getDbObjectNameAllAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDbObjectName
entryRuleDbObjectName 
:
{ before(grammarAccess.getDbObjectNameRule()); }
	 ruleDbObjectName
{ after(grammarAccess.getDbObjectNameRule()); } 
	 EOF 
;

// Rule DbObjectName
ruleDbObjectName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDbObjectNameAccess().getDbnameAssignment()); }
(rule__DbObjectName__DbnameAssignment)
{ after(grammarAccess.getDbObjectNameAccess().getDbnameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumns
entryRuleOrderByColumns 
:
{ before(grammarAccess.getOrderByColumnsRule()); }
	 ruleOrderByColumns
{ after(grammarAccess.getOrderByColumnsRule()); } 
	 EOF 
;

// Rule OrderByColumns
ruleOrderByColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup()); }
(rule__OrderByColumns__Group__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrderByColumnFull
entryRuleOrderByColumnFull 
:
{ before(grammarAccess.getOrderByColumnFullRule()); }
	 ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnFullRule()); } 
	 EOF 
;

// Rule OrderByColumnFull
ruleOrderByColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOrderByColumnFullAccess().getGroup()); }
(rule__OrderByColumnFull__Group__0)
{ after(grammarAccess.getOrderByColumnFullAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumns
entryRuleGroupByColumns 
:
{ before(grammarAccess.getGroupByColumnsRule()); }
	 ruleGroupByColumns
{ after(grammarAccess.getGroupByColumnsRule()); } 
	 EOF 
;

// Rule GroupByColumns
ruleGroupByColumns 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup()); }
(rule__GroupByColumns__Group__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupByColumnFull
entryRuleGroupByColumnFull 
:
{ before(grammarAccess.getGroupByColumnFullRule()); }
	 ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnFullRule()); } 
	 EOF 
;

// Rule GroupByColumnFull
ruleGroupByColumnFull 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupByColumnFullAccess().getColGrByAssignment()); }
(rule__GroupByColumnFull__ColGrByAssignment)
{ after(grammarAccess.getGroupByColumnFullAccess().getColGrByAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFullExpression
entryRuleFullExpression 
:
{ before(grammarAccess.getFullExpressionRule()); }
	 ruleFullExpression
{ after(grammarAccess.getFullExpressionRule()); } 
	 EOF 
;

// Rule FullExpression
ruleFullExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFullExpressionAccess().getGroup()); }
(rule__FullExpression__Group__0)
{ after(grammarAccess.getFullExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionFragmentSecond
entryRuleExpressionFragmentSecond 
:
{ before(grammarAccess.getExpressionFragmentSecondRule()); }
	 ruleExpressionFragmentSecond
{ after(grammarAccess.getExpressionFragmentSecondRule()); } 
	 EOF 
;

// Rule ExpressionFragmentSecond
ruleExpressionFragmentSecond 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getAlternatives()); }
(rule__ExpressionFragmentSecond__Alternatives)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionFragment
entryRuleExpressionFragment 
:
{ before(grammarAccess.getExpressionFragmentRule()); }
	 ruleExpressionFragment
{ after(grammarAccess.getExpressionFragmentRule()); } 
	 EOF 
;

// Rule ExpressionFragment
ruleExpressionFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionFragmentAccess().getAlternatives()); }
(rule__ExpressionFragment__Alternatives)
{ after(grammarAccess.getExpressionFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionGroup
entryRuleExpressionGroup 
:
{ before(grammarAccess.getExpressionGroupRule()); }
	 ruleExpressionGroup
{ after(grammarAccess.getExpressionGroupRule()); } 
	 EOF 
;

// Rule ExpressionGroup
ruleExpressionGroup 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionGroupAccess().getGroup()); }
(rule__ExpressionGroup__Group__0)
{ after(grammarAccess.getExpressionGroupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpression
entryRuleXExpression 
:
{ before(grammarAccess.getXExpressionRule()); }
	 ruleXExpression
{ after(grammarAccess.getXExpressionRule()); } 
	 EOF 
;

// Rule XExpression
ruleXExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpressionAccess().getGroup()); }
(rule__XExpression__Group__0)
{ after(grammarAccess.getXExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpression_
entryRuleXExpression_ 
:
{ before(grammarAccess.getXExpression_Rule()); }
	 ruleXExpression_
{ after(grammarAccess.getXExpression_Rule()); } 
	 EOF 
;

// Rule XExpression_
ruleXExpression_ 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpression_Access().getGroup()); }
(rule__XExpression___Group__0)
{ after(grammarAccess.getXExpression_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXExpressionParams
entryRuleXExpressionParams 
:
{ before(grammarAccess.getXExpressionParamsRule()); }
	 ruleXExpressionParams
{ after(grammarAccess.getXExpressionParamsRule()); } 
	 EOF 
;

// Rule XExpressionParams
ruleXExpressionParams 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup()); }
(rule__XExpressionParams__Group__0)
{ after(grammarAccess.getXExpressionParamsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJRParameter
entryRuleJRParameter 
:
{ before(grammarAccess.getJRParameterRule()); }
	 ruleJRParameter
{ after(grammarAccess.getJRParameterRule()); } 
	 EOF 
;

// Rule JRParameter
ruleJRParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJRParameterAccess().getJrprmAssignment()); }
(rule__JRParameter__JrprmAssignment)
{ after(grammarAccess.getJRParameterAccess().getJrprmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLike
entryRuleLike 
:
{ before(grammarAccess.getLikeRule()); }
	 ruleLike
{ after(grammarAccess.getLikeRule()); } 
	 EOF 
;

// Rule Like
ruleLike 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLikeAccess().getGroup()); }
(rule__Like__Group__0)
{ after(grammarAccess.getLikeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLikeOperand
entryRuleLikeOperand 
:
{ before(grammarAccess.getLikeOperandRule()); }
	 ruleLikeOperand
{ after(grammarAccess.getLikeOperandRule()); } 
	 EOF 
;

// Rule LikeOperand
ruleLikeOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLikeOperandAccess().getAlternatives()); }
(rule__LikeOperand__Alternatives)
{ after(grammarAccess.getLikeOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBetween
entryRuleBetween 
:
{ before(grammarAccess.getBetweenRule()); }
	 ruleBetween
{ after(grammarAccess.getBetweenRule()); } 
	 EOF 
;

// Rule Between
ruleBetween 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBetweenAccess().getGroup()); }
(rule__Between__Group__0)
{ after(grammarAccess.getBetweenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInOperator
entryRuleInOperator 
:
{ before(grammarAccess.getInOperatorRule()); }
	 ruleInOperator
{ after(grammarAccess.getInOperatorRule()); } 
	 EOF 
;

// Rule InOperator
ruleInOperator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInOperatorAccess().getGroup()); }
(rule__InOperator__Group__0)
{ after(grammarAccess.getInOperatorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandList
entryRuleOperandList 
:
{ before(grammarAccess.getOperandListRule()); }
	 ruleOperandList
{ after(grammarAccess.getOperandListRule()); } 
	 EOF 
;

// Rule OperandList
ruleOperandList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandListAccess().getGroup()); }
(rule__OperandList__Group__0)
{ after(grammarAccess.getOperandListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandAccess().getGroup()); }
(rule__Operand__Group__0)
{ after(grammarAccess.getOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandFragment
entryRuleOperandFragment 
:
{ before(grammarAccess.getOperandFragmentRule()); }
	 ruleOperandFragment
{ after(grammarAccess.getOperandFragmentRule()); } 
	 EOF 
;

// Rule OperandFragment
ruleOperandFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandFragmentAccess().getAlternatives()); }
(rule__OperandFragment__Alternatives)
{ after(grammarAccess.getOperandFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperandFunction
entryRuleOperandFunction 
:
{ before(grammarAccess.getOperandFunctionRule()); }
	 ruleOperandFunction
{ after(grammarAccess.getOperandFunctionRule()); } 
	 EOF 
;

// Rule OperandFunction
ruleOperandFunction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOperandFunctionAccess().getGroup()); }
(rule__OperandFunction__Group__0)
{ after(grammarAccess.getOperandFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArg
entryRuleOpFunctionArg 
:
{ before(grammarAccess.getOpFunctionArgRule()); }
	 ruleOpFunctionArg
{ after(grammarAccess.getOpFunctionArgRule()); } 
	 EOF 
;

// Rule OpFunctionArg
ruleOpFunctionArg 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup()); }
(rule__OpFunctionArg__Group__0)
{ after(grammarAccess.getOpFunctionArgAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArgOperand
entryRuleOpFunctionArgOperand 
:
{ before(grammarAccess.getOpFunctionArgOperandRule()); }
	 ruleOpFunctionArgOperand
{ after(grammarAccess.getOpFunctionArgOperandRule()); } 
	 EOF 
;

// Rule OpFunctionArgOperand
ruleOpFunctionArgOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpAssignment()); }
(rule__OpFunctionArgOperand__OpAssignment)
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionCast
entryRuleOpFunctionCast 
:
{ before(grammarAccess.getOpFunctionCastRule()); }
	 ruleOpFunctionCast
{ after(grammarAccess.getOpFunctionCastRule()); } 
	 EOF 
;

// Rule OpFunctionCast
ruleOpFunctionCast 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup()); }
(rule__OpFunctionCast__Group__0)
{ after(grammarAccess.getOpFunctionCastAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpFunctionArgAgregate
entryRuleOpFunctionArgAgregate 
:
{ before(grammarAccess.getOpFunctionArgAgregateRule()); }
	 ruleOpFunctionArgAgregate
{ after(grammarAccess.getOpFunctionArgAgregateRule()); } 
	 EOF 
;

// Rule OpFunctionArgAgregate
ruleOpFunctionArgAgregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getGroup()); }
(rule__OpFunctionArgAgregate__Group__0)
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXOperandFragment
entryRuleXOperandFragment 
:
{ before(grammarAccess.getXOperandFragmentRule()); }
	 ruleXOperandFragment
{ after(grammarAccess.getXOperandFragmentRule()); } 
	 EOF 
;

// Rule XOperandFragment
ruleXOperandFragment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXOperandFragmentAccess().getAlternatives()); }
(rule__XOperandFragment__Alternatives)
{ after(grammarAccess.getXOperandFragmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterOperand
entryRuleParameterOperand 
:
{ before(grammarAccess.getParameterOperandRule()); }
	 ruleParameterOperand
{ after(grammarAccess.getParameterOperandRule()); } 
	 EOF 
;

// Rule ParameterOperand
ruleParameterOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParameterOperandAccess().getPrmAssignment()); }
(rule__ParameterOperand__PrmAssignment)
{ after(grammarAccess.getParameterOperandAccess().getPrmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExclamationParameterOperand
entryRuleExclamationParameterOperand 
:
{ before(grammarAccess.getExclamationParameterOperandRule()); }
	 ruleExclamationParameterOperand
{ after(grammarAccess.getExclamationParameterOperandRule()); } 
	 EOF 
;

// Rule ExclamationParameterOperand
ruleExclamationParameterOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExclamationParameterOperandAccess().getPrmAssignment()); }
(rule__ExclamationParameterOperand__PrmAssignment)
{ after(grammarAccess.getExclamationParameterOperandAccess().getPrmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnOperand
entryRuleColumnOperand 
:
{ before(grammarAccess.getColumnOperandRule()); }
	 ruleColumnOperand
{ after(grammarAccess.getColumnOperandRule()); } 
	 EOF 
;

// Rule ColumnOperand
ruleColumnOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getColumnOperandAccess().getCfullAssignment()); }
(rule__ColumnOperand__CfullAssignment)
{ after(grammarAccess.getColumnOperandAccess().getCfullAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubQueryOperand
entryRuleSubQueryOperand 
:
{ before(grammarAccess.getSubQueryOperandRule()); }
	 ruleSubQueryOperand
{ after(grammarAccess.getSubQueryOperandRule()); } 
	 EOF 
;

// Rule SubQueryOperand
ruleSubQueryOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubQueryOperandAccess().getGroup()); }
(rule__SubQueryOperand__Group__0)
{ after(grammarAccess.getSubQueryOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScalarOperand
entryRuleScalarOperand 
:
{ before(grammarAccess.getScalarOperandRule()); }
	 ruleScalarOperand
{ after(grammarAccess.getScalarOperandRule()); } 
	 EOF 
;

// Rule ScalarOperand
ruleScalarOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScalarOperandAccess().getAlternatives()); }
(rule__ScalarOperand__Alternatives)
{ after(grammarAccess.getScalarOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSQLCASE
entryRuleSQLCASE 
:
{ before(grammarAccess.getSQLCASERule()); }
	 ruleSQLCASE
{ after(grammarAccess.getSQLCASERule()); } 
	 EOF 
;

// Rule SQLCASE
ruleSQLCASE 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSQLCASEAccess().getGroup()); }
(rule__SQLCASE__Group__0)
{ after(grammarAccess.getSQLCASEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSQLCaseWhens
entryRuleSQLCaseWhens 
:
{ before(grammarAccess.getSQLCaseWhensRule()); }
	 ruleSQLCaseWhens
{ after(grammarAccess.getSQLCaseWhensRule()); } 
	 EOF 
;

// Rule SQLCaseWhens
ruleSQLCaseWhens 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSQLCaseWhensAccess().getGroup()); }
(rule__SQLCaseWhens__Group__0)
{ after(grammarAccess.getSQLCaseWhensAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSqlCaseWhen
entryRuleSqlCaseWhen 
:
{ before(grammarAccess.getSqlCaseWhenRule()); }
	 ruleSqlCaseWhen
{ after(grammarAccess.getSqlCaseWhenRule()); } 
	 EOF 
;

// Rule SqlCaseWhen
ruleSqlCaseWhen 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSqlCaseWhenAccess().getGroup()); }
(rule__SqlCaseWhen__Group__0)
{ after(grammarAccess.getSqlCaseWhenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJoinType
entryRuleJoinType 
:
{ before(grammarAccess.getJoinTypeRule()); }
	 ruleJoinType
{ after(grammarAccess.getJoinTypeRule()); } 
	 EOF 
;

// Rule JoinType
ruleJoinType 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getJoinTypeAccess().getGroup()); }
(rule__JoinType__Group__0)
{ after(grammarAccess.getJoinTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDBID
entryRuleDBID 
:
{ before(grammarAccess.getDBIDRule()); }
	 ruleDBID
{ after(grammarAccess.getDBIDRule()); } 
	 EOF 
;

// Rule DBID
ruleDBID 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDBIDAccess().getAlternatives()); }
(rule__DBID__Alternatives)
{ after(grammarAccess.getDBIDAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringOperand
entryRuleStringOperand 
:
{ before(grammarAccess.getStringOperandRule()); }
	 ruleStringOperand
{ after(grammarAccess.getStringOperandRule()); } 
	 EOF 
;

// Rule StringOperand
ruleStringOperand 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall()); }
	RULE_STRING_
{ after(grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFNAME
entryRuleFNAME 
:
{ before(grammarAccess.getFNAMERule()); }
	 ruleFNAME
{ after(grammarAccess.getFNAMERule()); } 
	 EOF 
;

// Rule FNAME
ruleFNAME 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFNAMEAccess().getGroup()); }
(rule__FNAME__Group__0)
{ after(grammarAccess.getFNAMEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule XFunction
ruleXFunction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXFunctionAccess().getAlternatives()); }
(rule__XFunction__Alternatives)
{ after(grammarAccess.getXFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getALLKeyword_2_1_0()); }

	KEYWORD_23 

{ after(grammarAccess.getModelAccess().getALLKeyword_2_1_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getGroup_2_1_1()); }
(rule__Model__Group_2_1_1__0)
{ after(grammarAccess.getModelAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__OpAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0()); }

	KEYWORD_51 

{ after(grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1()); }

	KEYWORD_71 

{ after(grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2()); }

	KEYWORD_47 

{ after(grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3()); }

	KEYWORD_53 

{ after(grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0()); }
	RULE_INT
{ after(grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1()); }
	RULE_SIGNED_DOUBLE
{ after(grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getGroup_0()); }
(rule__ColumnOrAlias__Group_0__0)
{ after(grammarAccess.getColumnOrAliasAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getAllColsAssignment_1()); }
(rule__ColumnOrAlias__AllColsAssignment_1)
{ after(grammarAccess.getColumnOrAliasAccess().getAllColsAssignment_1()); }
)

    |(
{ before(grammarAccess.getColumnOrAliasAccess().getDbAllColsAssignment_2()); }
(rule__ColumnOrAlias__DbAllColsAssignment_2)
{ after(grammarAccess.getColumnOrAliasAccess().getDbAllColsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTfullAssignment_0_0()); }
(rule__TableOrAlias__TfullAssignment_0_0)
{ after(grammarAccess.getTableOrAliasAccess().getTfullAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getTableOrAliasAccess().getSqAssignment_0_1()); }
(rule__TableOrAlias__SqAssignment_0_1)
{ after(grammarAccess.getTableOrAliasAccess().getSqAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0_0()); }
(rule__OrderByColumnFull__ColOrderAssignment_0_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderIntAssignment_0_1()); }
(rule__OrderByColumnFull__ColOrderIntAssignment_0_1)
{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderIntAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__DirectionAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0()); }

	KEYWORD_26 

{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1()); }

	KEYWORD_30 

{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getGroup_0()); }
(rule__ExpressionFragmentSecond__Group_0__0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmAssignment_1()); }
(rule__ExpressionFragmentSecond__NotPrmAssignment_1)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__CAlternatives_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0()); }

	KEYWORD_24 

{ after(grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1()); }

	KEYWORD_21 

{ after(grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpgroupAssignment_0()); }
(rule__ExpressionFragment__ExpgroupAssignment_0)
{ after(grammarAccess.getExpressionFragmentAccess().getExpgroupAssignment_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getExpAssignment_1()); }
(rule__ExpressionFragment__ExpAssignment_1)
{ after(grammarAccess.getExpressionFragmentAccess().getExpAssignment_1()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpAssignment_2()); }
(rule__ExpressionFragment__XexpAssignment_2)
{ after(grammarAccess.getExpressionFragmentAccess().getXexpAssignment_2()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getNotPrmAssignment_3()); }
(rule__ExpressionFragment__NotPrmAssignment_3)
{ after(grammarAccess.getExpressionFragmentAccess().getNotPrmAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__XexpAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0()); }
	ruleXExpression
{ after(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1()); }
	ruleXExpression_
{ after(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullAssignment_1_0()); }
(rule__Expression__IsnullAssignment_1_0)
{ after(grammarAccess.getExpressionAccess().getIsnullAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getInAssignment_1_1()); }
(rule__Expression__InAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getInAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBetweenAssignment_1_2()); }
(rule__Expression__BetweenAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getBetweenAssignment_1_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLikeAssignment_1_3()); }
(rule__Expression__LikeAssignment_1_3)
{ after(grammarAccess.getExpressionAccess().getLikeAssignment_1_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCompAssignment_1_4()); }
(rule__Expression__CompAssignment_1_4)
{ after(grammarAccess.getExpressionAccess().getCompAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IsnullAlternatives_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullISNULLKeyword_1_0_0_0()); }

	KEYWORD_60 

{ after(grammarAccess.getExpressionAccess().getIsnullISNULLKeyword_1_0_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIsnullISNOTNULLKeyword_1_0_0_1()); }

	KEYWORD_76 

{ after(grammarAccess.getExpressionAccess().getIsnullISNOTNULLKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0()); }

	KEYWORD_10 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1()); }

	KEYWORD_17 

{ after(grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2()); }

	KEYWORD_8 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3()); }

	KEYWORD_15 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4()); }

	KEYWORD_9 

{ after(grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5()); }

	KEYWORD_16 

{ after(grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SubOperatorAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0()); }

	KEYWORD_25 

{ after(grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1()); }

	KEYWORD_23 

{ after(grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2()); }

	KEYWORD_38 

{ after(grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__OpLikeAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeLIKEKeyword_0_0_0()); }

	KEYWORD_37 

{ after(grammarAccess.getLikeAccess().getOpLikeLIKEKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getLikeAccess().getOpLikeNOTLIKEKeyword_0_0_1()); }

	KEYWORD_66 

{ after(grammarAccess.getLikeAccess().getOpLikeNOTLIKEKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getOp2Assignment_0()); }
(rule__LikeOperand__Op2Assignment_0)
{ after(grammarAccess.getLikeOperandAccess().getOp2Assignment_0()); }
)

    |(
{ before(grammarAccess.getLikeOperandAccess().getFop2Assignment_1()); }
(rule__LikeOperand__Fop2Assignment_1)
{ after(grammarAccess.getLikeOperandAccess().getFop2Assignment_1()); }
)

    |(
{ before(grammarAccess.getLikeOperandAccess().getFcastAssignment_2()); }
(rule__LikeOperand__FcastAssignment_2)
{ after(grammarAccess.getLikeOperandAccess().getFcastAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__OpBetweenAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenBETWEENKeyword_0_0_0()); }

	KEYWORD_58 

{ after(grammarAccess.getBetweenAccess().getOpBetweenBETWEENKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getBetweenAccess().getOpBetweenNOTBETWEENKeyword_0_0_1()); }

	KEYWORD_77 

{ after(grammarAccess.getBetweenAccess().getOpBetweenNOTBETWEENKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpNOTINKeyword_1_0_0()); }

	KEYWORD_55 

{ after(grammarAccess.getInOperatorAccess().getOpNOTINKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getInOperatorAccess().getOpINKeyword_1_0_1()); }

	KEYWORD_19 

{ after(grammarAccess.getInOperatorAccess().getOpINKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getSubqueryAssignment_3_0()); }
(rule__InOperator__SubqueryAssignment_3_0)
{ after(grammarAccess.getInOperatorAccess().getSubqueryAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getInOperatorAccess().getOpListAssignment_3_1()); }
(rule__InOperator__OpListAssignment_3_1)
{ after(grammarAccess.getInOperatorAccess().getOpListAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_0()); }
(rule__Operand__Group_1_0_0__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_1()); }
(rule__Operand__Group_1_0_1__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_2()); }
(rule__Operand__Group_1_0_2__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_3()); }
(rule__Operand__Group_1_0_3__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_3()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getGroup_1_0_4()); }
(rule__Operand__Group_1_0_4__0)
{ after(grammarAccess.getOperandAccess().getGroup_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getColumnAssignment_0()); }
(rule__OperandFragment__ColumnAssignment_0)
{ after(grammarAccess.getOperandFragmentAccess().getColumnAssignment_0()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getXopAssignment_1()); }
(rule__OperandFragment__XopAssignment_1)
{ after(grammarAccess.getOperandFragmentAccess().getXopAssignment_1()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getSubqAssignment_2()); }
(rule__OperandFragment__SubqAssignment_2)
{ after(grammarAccess.getOperandFragmentAccess().getSubqAssignment_2()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getFcastAssignment_3()); }
(rule__OperandFragment__FcastAssignment_3)
{ after(grammarAccess.getOperandFragmentAccess().getFcastAssignment_3()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getFuncAssignment_4()); }
(rule__OperandFragment__FuncAssignment_4)
{ after(grammarAccess.getOperandFragmentAccess().getFuncAssignment_4()); }
)

    |(
{ before(grammarAccess.getOperandFragmentAccess().getSqlcaseAssignment_5()); }
(rule__OperandFragment__SqlcaseAssignment_5)
{ after(grammarAccess.getOperandFragmentAccess().getSqlcaseAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getSTARTerminalRuleCall_2_0()); }
	RULE_STAR
{ after(grammarAccess.getOperandFunctionAccess().getSTARTerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getOperandFunctionAccess().getArgsAssignment_2_1()); }
(rule__OperandFunction__ArgsAssignment_2_1)
{ after(grammarAccess.getOperandFunctionAccess().getArgsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgOperand__OpAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0()); }
	ruleOpFunctionArgAgregate
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1()); }
	ruleOperand
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0()); }

	KEYWORD_23 

{ after(grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1()); }

	KEYWORD_64 

{ after(grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getParamAssignment_0()); }
(rule__XOperandFragment__ParamAssignment_0)
{ after(grammarAccess.getXOperandFragmentAccess().getParamAssignment_0()); }
)

    |(
{ before(grammarAccess.getXOperandFragmentAccess().getEparamAssignment_1()); }
(rule__XOperandFragment__EparamAssignment_1)
{ after(grammarAccess.getXOperandFragmentAccess().getEparamAssignment_1()); }
)

    |(
{ before(grammarAccess.getXOperandFragmentAccess().getScalarAssignment_2()); }
(rule__XOperandFragment__ScalarAssignment_2)
{ after(grammarAccess.getXOperandFragmentAccess().getScalarAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSointAssignment_0()); }
(rule__ScalarOperand__SointAssignment_0)
{ after(grammarAccess.getScalarOperandAccess().getSointAssignment_0()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSostrAssignment_1()); }
(rule__ScalarOperand__SostrAssignment_1)
{ after(grammarAccess.getScalarOperandAccess().getSostrAssignment_1()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodblAssignment_2()); }
(rule__ScalarOperand__SodblAssignment_2)
{ after(grammarAccess.getScalarOperandAccess().getSodblAssignment_2()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodateAssignment_3()); }
(rule__ScalarOperand__SodateAssignment_3)
{ after(grammarAccess.getScalarOperandAccess().getSodateAssignment_3()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSotimeAssignment_4()); }
(rule__ScalarOperand__SotimeAssignment_4)
{ after(grammarAccess.getScalarOperandAccess().getSotimeAssignment_4()); }
)

    |(
{ before(grammarAccess.getScalarOperandAccess().getSodtAssignment_5()); }
(rule__ScalarOperand__SodtAssignment_5)
{ after(grammarAccess.getScalarOperandAccess().getSodtAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0()); }

	KEYWORD_44 

{ after(grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getGroup_1_1()); }
(rule__JoinType__Group_1_1__0)
{ after(grammarAccess.getJoinTypeAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2()); }

	KEYWORD_42 

{ after(grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Alternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0()); }

	KEYWORD_35 

{ after(grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1()); }

	KEYWORD_50 

{ after(grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2()); }

	KEYWORD_33 

{ after(grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DBID__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1()); }
	RULE_DBNAME
{ after(grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0()); }
(	KEYWORD_19
)
{ after(grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1()); }
(	KEYWORD_48
)
{ after(grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2()); }
(	KEYWORD_43
)
{ after(grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3()); }
(	KEYWORD_67
)
{ after(grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4()); }
(	KEYWORD_36
)
{ after(grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5()); }
(	KEYWORD_59
)
{ after(grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6()); }
(	KEYWORD_45
)
{ after(grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7()); }
(	KEYWORD_70
)
{ after(grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8()); }
(	KEYWORD_58
)
{ after(grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9()); }
(	KEYWORD_74
)
{ after(grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10()); }
(	KEYWORD_69
)
{ after(grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11()); }
(	KEYWORD_63
)
{ after(grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getQueryAssignment_0()); }
(rule__Model__QueryAssignment_0)
{ after(grammarAccess.getModelAccess().getQueryAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)?
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_2()); }
(rule__Model__Group_2__0)?
{ after(grammarAccess.getModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_3()); }
(rule__Model__Group_3__0)?
{ after(grammarAccess.getModelAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_4()); }
(rule__Model__Group_4__0)?
{ after(grammarAccess.getModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getORDERBYKeyword_1_0()); }

	KEYWORD_68 

{ after(grammarAccess.getModelAccess().getORDERBYKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOrderByEntryAssignment_1_1()); }
(rule__Model__OrderByEntryAssignment_1_1)
{ after(grammarAccess.getModelAccess().getOrderByEntryAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2__0__Impl
	rule__Model__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLIMITKeyword_2_0()); }

	KEYWORD_46 

{ after(grammarAccess.getModelAccess().getLIMITKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAlternatives_2_1()); }
(rule__Model__Alternatives_2_1)
{ after(grammarAccess.getModelAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2_1_1__0__Impl
	rule__Model__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_0()); }
	RULE_INT
{ after(grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_2_1_1_1()); }
(rule__Model__Group_2_1_1_1__0)?
{ after(grammarAccess.getModelAccess().getGroup_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_2_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2_1_1_1__0__Impl
	rule__Model__Group_2_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_2_1_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getModelAccess().getCommaKeyword_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_1_1()); }
	RULE_INT
{ after(grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3__0__Impl
	rule__Model__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOFFSETKeyword_3_0()); }

	KEYWORD_56 

{ after(grammarAccess.getModelAccess().getOFFSETKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getINTTerminalRuleCall_3_1()); }
	RULE_INT
{ after(grammarAccess.getModelAccess().getINTTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__0__Impl
	rule__Model__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFETCHFIRSTKeyword_4_0()); }

	KEYWORD_75 

{ after(grammarAccess.getModelAccess().getFETCHFIRSTKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__1__Impl
	rule__Model__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getINTTerminalRuleCall_4_1()); }
	RULE_INT
{ after(grammarAccess.getModelAccess().getINTTerminalRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getROWSONLYKeyword_4_2()); }

	KEYWORD_72 

{ after(grammarAccess.getModelAccess().getROWSONLYKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectQuery__Group__0__Impl
	rule__SelectQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0()); }
	ruleSelect
{ after(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectQuery__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getOpAssignment_1()); }
(rule__SelectQuery__OpAssignment_1)*
{ after(grammarAccess.getSelectQueryAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectSubSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__0__Impl
	rule__SelectSubSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpAssignment_0()); }
(rule__SelectSubSet__OpAssignment_0)
{ after(grammarAccess.getSelectSubSetAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSubSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__1__Impl
	rule__SelectSubSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getAllAssignment_1()); }
(rule__SelectSubSet__AllAssignment_1)?
{ after(grammarAccess.getSelectSubSetAccess().getAllAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectSubSet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectSubSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getQueryAssignment_2()); }
(rule__SelectSubSet__QueryAssignment_2)
{ after(grammarAccess.getSelectSubSetAccess().getQueryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Select__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelectAssignment_0()); }
(rule__Select__SelectAssignment_0)
{ after(grammarAccess.getSelectAccess().getSelectAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getDISTINCTKeyword_1()); }
(
	KEYWORD_64 
)?
{ after(grammarAccess.getSelectAccess().getDISTINCTKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_2()); }
(rule__Select__Group_2__0)?
{ after(grammarAccess.getSelectAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getColsAssignment_3()); }
(rule__Select__ColsAssignment_3)
{ after(grammarAccess.getSelectAccess().getColsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getFROMKeyword_4()); }

	KEYWORD_32 

{ after(grammarAccess.getSelectAccess().getFROMKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__5__Impl
	rule__Select__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTblAssignment_5()); }
(rule__Select__TblAssignment_5)
{ after(grammarAccess.getSelectAccess().getTblAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__6__Impl
	rule__Select__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_6()); }
(rule__Select__Group_6__0)?
{ after(grammarAccess.getSelectAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__7__Impl
	rule__Select__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_7()); }
(rule__Select__Group_7__0)?
{ after(grammarAccess.getSelectAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroup_8()); }
(rule__Select__Group_8__0)?
{ after(grammarAccess.getSelectAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Select__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__0__Impl
	rule__Select__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTOPKeyword_2_0()); }

	KEYWORD_28 

{ after(grammarAccess.getSelectAccess().getTOPKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__1__Impl
	rule__Select__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getAlternatives_2_1()); }
(rule__Select__Alternatives_2_1)
{ after(grammarAccess.getSelectAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__2__Impl
	rule__Select__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getPERCENTKeyword_2_2()); }
(
	KEYWORD_62 
)?
{ after(grammarAccess.getSelectAccess().getPERCENTKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWITHTIESKeyword_2_3()); }
(
	KEYWORD_73 
)?
{ after(grammarAccess.getSelectAccess().getWITHTIESKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Select__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_6__0__Impl
	rule__Select__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWHEREKeyword_6_0()); }

	KEYWORD_52 

{ after(grammarAccess.getSelectAccess().getWHEREKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWhereExpressionAssignment_6_1()); }
(rule__Select__WhereExpressionAssignment_6_1)
{ after(grammarAccess.getSelectAccess().getWhereExpressionAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_7__0__Impl
	rule__Select__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGROUPBYKeyword_7_0()); }

	KEYWORD_65 

{ after(grammarAccess.getSelectAccess().getGROUPBYKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroupByEntryAssignment_7_1()); }
(rule__Select__GroupByEntryAssignment_7_1)
{ after(grammarAccess.getSelectAccess().getGroupByEntryAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_8__0__Impl
	rule__Select__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHAVINGKeyword_8_0()); }

	KEYWORD_54 

{ after(grammarAccess.getSelectAccess().getHAVINGKeyword_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHavingEntryAssignment_8_1()); }
(rule__Select__HavingEntryAssignment_8_1)
{ after(grammarAccess.getSelectAccess().getHavingEntryAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__0__Impl
	rule__Columns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
	ruleColumnOrAlias
{ after(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getGroup_1()); }
(rule__Columns__Group_1__0)?
{ after(grammarAccess.getColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__0__Impl
	rule__Columns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getColumnsAccess().getGroup_1_1()); }
(rule__Columns__Group_1_1__0)*
{ after(grammarAccess.getColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Columns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__0__Impl
	rule__Columns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Columns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Columns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__Columns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnOrAlias__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__0__Impl
	rule__ColumnOrAlias__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getCeAssignment_0_0()); }
(rule__ColumnOrAlias__CeAssignment_0_0)
{ after(grammarAccess.getColumnOrAliasAccess().getCeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__1__Impl
	rule__ColumnOrAlias__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasAssignment_0_1()); }
(rule__ColumnOrAlias__AliasAssignment_0_1)?
{ after(grammarAccess.getColumnOrAliasAccess().getAliasAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnOrAlias__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnOrAlias__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_0_2()); }
(rule__ColumnOrAlias__ColAliasAssignment_0_2)?
{ after(grammarAccess.getColumnOrAliasAccess().getColAliasAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ColumnFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__0__Impl
	rule__ColumnFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1()); }
(rule__ColumnFull__Group_1__0)?
{ after(grammarAccess.getColumnFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__0__Impl
	rule__ColumnFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getColEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getColumnFullAccess().getColEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
(rule__ColumnFull__Group_1_1__0)
{ after(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
(rule__ColumnFull__Group_1_1__0)*
{ after(grammarAccess.getColumnFullAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnFull__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1_1__0__Impl
	rule__ColumnFull__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0()); }

	KEYWORD_6 

{ after(grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnFull__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnFull__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getEntriesAssignment_1_1_1()); }
(rule__ColumnFull__EntriesAssignment_1_1_1)
{ after(grammarAccess.getColumnFullAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__0__Impl
	rule__Tables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0()); }
	ruleFromTable
{ after(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getGroup_1()); }
(rule__Tables__Group_1__0)?
{ after(grammarAccess.getTablesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__0__Impl
	rule__Tables__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getTablesAccess().getGroup_1_1()); }
(rule__Tables__Group_1_1__0)*
{ after(grammarAccess.getTablesAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Tables__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__0__Impl
	rule__Tables__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getTablesAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Tables__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Tables__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
(rule__Tables__EntriesAssignment_1_1_1)
{ after(grammarAccess.getTablesAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromTable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTable__Group__0__Impl
	rule__FromTable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getTableAssignment_0()); }
(rule__FromTable__TableAssignment_0)
{ after(grammarAccess.getFromTableAccess().getTableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getFjoinAssignment_1()); }
(rule__FromTable__FjoinAssignment_1)*
{ after(grammarAccess.getFromTableAccess().getFjoinAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FromTableJoin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__0__Impl
	rule__FromTableJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinAssignment_0()); }
(rule__FromTableJoin__JoinAssignment_0)
{ after(grammarAccess.getFromTableJoinAccess().getJoinAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__1__Impl
	rule__FromTableJoin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getOnTableAssignment_1()); }
(rule__FromTableJoin__OnTableAssignment_1)
{ after(grammarAccess.getFromTableJoinAccess().getOnTableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__2__Impl
	rule__FromTableJoin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getONKeyword_2()); }

	KEYWORD_20 

{ after(grammarAccess.getFromTableJoinAccess().getONKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FromTableJoin__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FromTableJoin__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinExprAssignment_3()); }
(rule__FromTableJoin__JoinExprAssignment_3)
{ after(grammarAccess.getFromTableJoinAccess().getJoinExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TableOrAlias__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__0__Impl
	rule__TableOrAlias__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAlternatives_0()); }
(rule__TableOrAlias__Alternatives_0)
{ after(grammarAccess.getTableOrAliasAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__1__Impl
	rule__TableOrAlias__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasAssignment_1()); }
(rule__TableOrAlias__AliasAssignment_1)?
{ after(grammarAccess.getTableOrAliasAccess().getAliasAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableOrAlias__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableOrAlias__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_2()); }
(rule__TableOrAlias__TblAliasAssignment_2)?
{ after(grammarAccess.getTableOrAliasAccess().getTblAliasAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TableFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group__0__Impl
	rule__TableFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0()); }
	ruleDbObjectName
{ after(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getGroup_1()); }
(rule__TableFull__Group_1__0)?
{ after(grammarAccess.getTableFullAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1__0__Impl
	rule__TableFull__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTableFullAccess().getGroup_1_1()); }
(rule__TableFull__Group_1_1__0)
{ after(grammarAccess.getTableFullAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getTableFullAccess().getGroup_1_1()); }
(rule__TableFull__Group_1_1__0)*
{ after(grammarAccess.getTableFullAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TableFull__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1_1__0__Impl
	rule__TableFull__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0()); }

	KEYWORD_6 

{ after(grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TableFull__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TableFull__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getEntriesAssignment_1_1_1()); }
(rule__TableFull__EntriesAssignment_1_1_1)
{ after(grammarAccess.getTableFullAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DbObjectNameAll__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__0__Impl
	rule__DbObjectNameAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getDbnameAssignment_0()); }
(rule__DbObjectNameAll__DbnameAssignment_0)
{ after(grammarAccess.getDbObjectNameAllAccess().getDbnameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DbObjectNameAll__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__1__Impl
	rule__DbObjectNameAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1()); }

	KEYWORD_6 

{ after(grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DbObjectNameAll__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DbObjectNameAll__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2()); }
	RULE_STAR
{ after(grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrderByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__0__Impl
	rule__OrderByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
	ruleOrderByColumnFull
{ after(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
(rule__OrderByColumns__Group_1__0)?
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__0__Impl
	rule__OrderByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
(rule__OrderByColumns__Group_1_1__0)*
{ after(grammarAccess.getOrderByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__0__Impl
	rule__OrderByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__OrderByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOrderByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrderByColumnFull__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group__0__Impl
	rule__OrderByColumnFull__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getAlternatives_0()); }
(rule__OrderByColumnFull__Alternatives_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrderByColumnFull__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrderByColumnFull__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionAssignment_1()); }
(rule__OrderByColumnFull__DirectionAssignment_1)?
{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__0__Impl
	rule__GroupByColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
	ruleGroupByColumnFull
{ after(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
(rule__GroupByColumns__Group_1__0)?
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__0__Impl
	rule__GroupByColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
(rule__GroupByColumns__Group_1_1__0)*
{ after(grammarAccess.getGroupByColumnsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupByColumns__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__0__Impl
	rule__GroupByColumns__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupByColumns__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupByColumns__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
(rule__GroupByColumns__EntriesAssignment_1_1_1)
{ after(grammarAccess.getGroupByColumnsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FullExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group__0__Impl
	rule__FullExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0()); }
	ruleExpressionFragment
{ after(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getGroup_1()); }
(rule__FullExpression__Group_1__0)?
{ after(grammarAccess.getFullExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FullExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group_1__0__Impl
	rule__FullExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FullExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FullExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
(rule__FullExpression__EntriesAssignment_1_1)
{ after(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
)
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
(rule__FullExpression__EntriesAssignment_1_1)*
{ after(grammarAccess.getFullExpressionAccess().getEntriesAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionFragmentSecond__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionFragmentSecond__Group_0__0__Impl
	rule__ExpressionFragmentSecond__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCAssignment_0_0()); }
(rule__ExpressionFragmentSecond__CAssignment_0_0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getCAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionFragmentSecond__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionFragmentSecond__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getEfragAssignment_0_1()); }
(rule__ExpressionFragmentSecond__EfragAssignment_0_1)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getEfragAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionGroup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__0__Impl
	rule__ExpressionGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprGroupAction_0()); }
(

)
{ after(grammarAccess.getExpressionGroupAccess().getExprGroupAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__1__Impl
	rule__ExpressionGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__2__Impl
	rule__ExpressionGroup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprAssignment_2()); }
(rule__ExpressionGroup__ExprAssignment_2)
{ after(grammarAccess.getExpressionGroupAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionGroup__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionGroup__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_2 

{ after(grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__XExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__0__Impl
	rule__XExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXKeyword_0()); }

	KEYWORD_14 

{ after(grammarAccess.getXExpressionAccess().getXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__1__Impl
	rule__XExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXExprAction_1()); }
(

)
{ after(grammarAccess.getXExpressionAccess().getXExprAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__2__Impl
	rule__XExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_11 

{ after(grammarAccess.getXExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__3__Impl
	rule__XExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXfAssignment_3()); }
(rule__XExpression__XfAssignment_3)
{ after(grammarAccess.getXExpressionAccess().getXfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__4__Impl
	rule__XExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getCommaKeyword_4()); }

	KEYWORD_4 

{ after(grammarAccess.getXExpressionAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__5__Impl
	rule__XExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getColAssignment_5()); }
(rule__XExpression__ColAssignment_5)
{ after(grammarAccess.getXExpressionAccess().getColAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__6__Impl
	rule__XExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getGroup_6()); }
(rule__XExpression__Group_6__0)?
{ after(grammarAccess.getXExpressionAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_7()); }

	KEYWORD_13 

{ after(grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__XExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group_6__0__Impl
	rule__XExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getCommaKeyword_6_0()); }

	KEYWORD_4 

{ after(grammarAccess.getXExpressionAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getPrmAssignment_6_1()); }
(rule__XExpression__PrmAssignment_6_1)
{ after(grammarAccess.getXExpressionAccess().getPrmAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpression___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__0__Impl
	rule__XExpression___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXKeyword_0()); }

	KEYWORD_14 

{ after(grammarAccess.getXExpression_Access().getXKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__1__Impl
	rule__XExpression___Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXExprAction_1()); }
(

)
{ after(grammarAccess.getXExpression_Access().getXExprAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__2__Impl
	rule__XExpression___Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getLeftCurlyBracketKeyword_2()); }

	KEYWORD_11 

{ after(grammarAccess.getXExpression_Access().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__3__Impl
	rule__XExpression___Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXfAssignment_3()); }
(rule__XExpression___XfAssignment_3)
{ after(grammarAccess.getXExpression_Access().getXfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__4__Impl
	rule__XExpression___Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getVerticalLineKeyword_4()); }

	KEYWORD_12 

{ after(grammarAccess.getXExpression_Access().getVerticalLineKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__5__Impl
	rule__XExpression___Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getColAssignment_5()); }
(rule__XExpression___ColAssignment_5)
{ after(grammarAccess.getXExpression_Access().getColAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__6__Impl
	rule__XExpression___Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getGroup_6()); }
(rule__XExpression___Group_6__0)?
{ after(grammarAccess.getXExpression_Access().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_7()); }

	KEYWORD_13 

{ after(grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__XExpression___Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group_6__0__Impl
	rule__XExpression___Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getVerticalLineKeyword_6_0()); }

	KEYWORD_12 

{ after(grammarAccess.getXExpression_Access().getVerticalLineKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpression___Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpression___Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getPrmAssignment_6_1()); }
(rule__XExpression___PrmAssignment_6_1)
{ after(grammarAccess.getXExpression_Access().getPrmAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group__0__Impl
	rule__XExpressionParams__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0()); }
	ruleJRParameter
{ after(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1()); }
(rule__XExpressionParams__Group_1__0)?
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1__0__Impl
	rule__XExpressionParams__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
(rule__XExpressionParams__Group_1_1__0)
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
(rule__XExpressionParams__Group_1_1__0)*
{ after(grammarAccess.getXExpressionParamsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XExpressionParams__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1_1__0__Impl
	rule__XExpressionParams__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XExpressionParams__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XExpressionParams__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getEntriesAssignment_1_1_1()); }
(rule__XExpressionParams__EntriesAssignment_1_1_1)
{ after(grammarAccess.getXExpressionParamsAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOp1Assignment_0()); }
(rule__Expression__Op1Assignment_0)
{ after(grammarAccess.getExpressionAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives_1()); }
(rule__Expression__Alternatives_1)
{ after(grammarAccess.getExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
(rule__Comparison__OperatorAssignment_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorAssignment_1()); }
(rule__Comparison__SubOperatorAssignment_1)?
{ after(grammarAccess.getComparisonAccess().getSubOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOp2Assignment_2()); }
(rule__Comparison__Op2Assignment_2)
{ after(grammarAccess.getComparisonAccess().getOp2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Like__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Like__Group__0__Impl
	rule__Like__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeAssignment_0()); }
(rule__Like__OpLikeAssignment_0)
{ after(grammarAccess.getLikeAccess().getOpLikeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Like__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Like__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOp2Assignment_1()); }
(rule__Like__Op2Assignment_1)
{ after(grammarAccess.getLikeAccess().getOp2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Between__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__0__Impl
	rule__Between__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenAssignment_0()); }
(rule__Between__OpBetweenAssignment_0)
{ after(grammarAccess.getBetweenAccess().getOpBetweenAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__1__Impl
	rule__Between__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp2Assignment_1()); }
(rule__Between__Op2Assignment_1)
{ after(grammarAccess.getBetweenAccess().getOp2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__2__Impl
	rule__Between__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getANDKeyword_2()); }

	KEYWORD_24 

{ after(grammarAccess.getBetweenAccess().getANDKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Between__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Between__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp3Assignment_3()); }
(rule__Between__Op3Assignment_3)
{ after(grammarAccess.getBetweenAccess().getOp3Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InOperator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__0__Impl
	rule__InOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getInOperAction_0()); }
(

)
{ after(grammarAccess.getInOperatorAccess().getInOperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__1__Impl
	rule__InOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpAssignment_1()); }
(rule__InOperator__OpAssignment_1)
{ after(grammarAccess.getInOperatorAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__2__Impl
	rule__InOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getLeftParenthesisKeyword_2()); }

	KEYWORD_1 

{ after(grammarAccess.getInOperatorAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__3__Impl
	rule__InOperator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getAlternatives_3()); }
(rule__InOperator__Alternatives_3)
{ after(grammarAccess.getInOperatorAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InOperator__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InOperator__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getRightParenthesisKeyword_4()); }

	KEYWORD_2 

{ after(grammarAccess.getInOperatorAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OperandList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group__0__Impl
	rule__OperandList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0()); }
	ruleScalarOperand
{ after(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getGroup_1()); }
(rule__OperandList__Group_1__0)?
{ after(grammarAccess.getOperandListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1__0__Impl
	rule__OperandList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOperandListAccess().getGroup_1_1()); }
(rule__OperandList__Group_1_1__0)
{ after(grammarAccess.getOperandListAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOperandListAccess().getGroup_1_1()); }
(rule__OperandList__Group_1_1__0)*
{ after(grammarAccess.getOperandListAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1_1__0__Impl
	rule__OperandList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getEntriesAssignment_1_1_1()); }
(rule__OperandList__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOperandListAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group__0__Impl
	rule__Operand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getOp1Assignment_0()); }
(rule__Operand__Op1Assignment_0)
{ after(grammarAccess.getOperandAccess().getOp1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getGroup_1()); }
(rule__Operand__Group_1__0)*
{ after(grammarAccess.getOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1__0__Impl
	rule__Operand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getAlternatives_1_0()); }
(rule__Operand__Alternatives_1_0)
{ after(grammarAccess.getOperandAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getRightAssignment_1_1()); }
(rule__Operand__RightAssignment_1_1)
{ after(grammarAccess.getOperandAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_0__0__Impl
	rule__Operand__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1()); }

	KEYWORD_3 

{ after(grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_1__0__Impl
	rule__Operand__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1()); }

	KEYWORD_5 

{ after(grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_2__0__Impl
	rule__Operand__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getStarLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getStarLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_2_1()); }
	RULE_STAR
{ after(grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_3__0__Impl
	rule__Operand__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getDivLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getDivLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getSolidusKeyword_1_0_3_1()); }

	KEYWORD_7 

{ after(grammarAccess.getOperandAccess().getSolidusKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Operand__Group_1_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_4__0__Impl
	rule__Operand__Group_1_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getConcatLeftAction_1_0_4_0()); }
(

)
{ after(grammarAccess.getOperandAccess().getConcatLeftAction_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_1_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_1_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_1_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_4_1()); }

	KEYWORD_22 

{ after(grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperandFunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__0__Impl
	rule__OperandFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0()); }
(

)
{ after(grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__1__Impl
	rule__OperandFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFnameAssignment_1()); }
(rule__OperandFunction__FnameAssignment_1)
{ after(grammarAccess.getOperandFunctionAccess().getFnameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__2__Impl
	rule__OperandFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getAlternatives_2()); }
(rule__OperandFunction__Alternatives_2)
{ after(grammarAccess.getOperandFunctionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperandFunction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperandFunction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_2 

{ after(grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OpFunctionArg__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group__0__Impl
	rule__OpFunctionArg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0()); }
	ruleOpFunctionArgOperand
{ after(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1()); }
(rule__OpFunctionArg__Group_1__0)?
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArg__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1__0__Impl
	rule__OpFunctionArg__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
(rule__OpFunctionArg__Group_1_1__0)
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
(rule__OpFunctionArg__Group_1_1__0)*
{ after(grammarAccess.getOpFunctionArgAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArg__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1_1__0__Impl
	rule__OpFunctionArg__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0()); }

	KEYWORD_4 

{ after(grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArg__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArg__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getEntriesAssignment_1_1_1()); }
(rule__OpFunctionArg__EntriesAssignment_1_1_1)
{ after(grammarAccess.getOpFunctionArgAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionCast__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__0__Impl
	rule__OpFunctionCast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0()); }

	KEYWORD_41 

{ after(grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__1__Impl
	rule__OpFunctionCast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getOpAssignment_1()); }
(rule__OpFunctionCast__OpAssignment_1)
{ after(grammarAccess.getOpFunctionCastAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__2__Impl
	rule__OpFunctionCast__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getASKeyword_2()); }

	KEYWORD_18 

{ after(grammarAccess.getOpFunctionCastAccess().getASKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__3__Impl
	rule__OpFunctionCast__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getTypeAssignment_3()); }
(rule__OpFunctionCast__TypeAssignment_3)
{ after(grammarAccess.getOpFunctionCastAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__4__Impl
	rule__OpFunctionCast__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup_4()); }
(rule__OpFunctionCast__Group_4__0)?
{ after(grammarAccess.getOpFunctionCastAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5()); }

	KEYWORD_2 

{ after(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__OpFunctionCast__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__0__Impl
	rule__OpFunctionCast__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0()); }

	KEYWORD_1 

{ after(grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__1__Impl
	rule__OpFunctionCast__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getPAssignment_4_1()); }
(rule__OpFunctionCast__PAssignment_4_1)
{ after(grammarAccess.getOpFunctionCastAccess().getPAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__2__Impl
	rule__OpFunctionCast__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getGroup_4_2()); }
(rule__OpFunctionCast__Group_4_2__0)?
{ after(grammarAccess.getOpFunctionCastAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3()); }

	KEYWORD_2 

{ after(grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OpFunctionCast__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4_2__0__Impl
	rule__OpFunctionCast__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0()); }

	KEYWORD_4 

{ after(grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionCast__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionCast__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getP2Assignment_4_2_1()); }
(rule__OpFunctionCast__P2Assignment_4_2_1)
{ after(grammarAccess.getOpFunctionCastAccess().getP2Assignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OpFunctionArgAgregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArgAgregate__Group__0__Impl
	rule__OpFunctionArgAgregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getAlternatives_0()); }
(rule__OpFunctionArgAgregate__Alternatives_0)
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpFunctionArgAgregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpFunctionArgAgregate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgAgregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1()); }
	ruleOperand
{ after(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubQueryOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__0__Impl
	rule__SubQueryOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0()); }
(

)
{ after(grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__1__Impl
	rule__SubQueryOperand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__2__Impl
	rule__SubQueryOperand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSelAssignment_2()); }
(rule__SubQueryOperand__SelAssignment_2)
{ after(grammarAccess.getSubQueryOperandAccess().getSelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubQueryOperand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubQueryOperand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3()); }

	KEYWORD_2 

{ after(grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SQLCASE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__0__Impl
	rule__SQLCASE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getCASEKeyword_0()); }

	KEYWORD_29 

{ after(grammarAccess.getSQLCASEAccess().getCASEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__1__Impl
	rule__SQLCASE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getExprAssignment_1()); }
(rule__SQLCASE__ExprAssignment_1)?
{ after(grammarAccess.getSQLCASEAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__2__Impl
	rule__SQLCASE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getWhenAssignment_2()); }
(rule__SQLCASE__WhenAssignment_2)
{ after(grammarAccess.getSQLCASEAccess().getWhenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCASE__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCASE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getENDKeyword_3()); }

	KEYWORD_27 

{ after(grammarAccess.getSQLCASEAccess().getENDKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SQLCaseWhens__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group__0__Impl
	rule__SQLCaseWhens__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0()); }
	ruleSqlCaseWhen
{ after(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCaseWhens__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getGroup_1()); }
(rule__SQLCaseWhens__Group_1__0)?
{ after(grammarAccess.getSQLCaseWhensAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SQLCaseWhens__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group_1__0__Impl
	rule__SQLCaseWhens__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SQLCaseWhens__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SQLCaseWhens__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
(rule__SQLCaseWhens__EntriesAssignment_1_1)
{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
)
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
(rule__SQLCaseWhens__EntriesAssignment_1_1)*
{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SqlCaseWhen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__0__Impl
	rule__SqlCaseWhen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0()); }

	KEYWORD_40 

{ after(grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__1__Impl
	rule__SqlCaseWhen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getExprAssignment_1()); }
(rule__SqlCaseWhen__ExprAssignment_1)
{ after(grammarAccess.getSqlCaseWhenAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__2__Impl
	rule__SqlCaseWhen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2()); }

	KEYWORD_39 

{ after(grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__3__Impl
	rule__SqlCaseWhen__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTexpAssignment_3()); }
(rule__SqlCaseWhen__TexpAssignment_3)
{ after(grammarAccess.getSqlCaseWhenAccess().getTexpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getGroup_4()); }
(rule__SqlCaseWhen__Group_4__0)?
{ after(grammarAccess.getSqlCaseWhenAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SqlCaseWhen__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group_4__0__Impl
	rule__SqlCaseWhen__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0()); }

	KEYWORD_31 

{ after(grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SqlCaseWhen__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SqlCaseWhen__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getEexpAssignment_4_1()); }
(rule__SqlCaseWhen__EexpAssignment_4_1)
{ after(grammarAccess.getSqlCaseWhenAccess().getEexpAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JoinType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__0__Impl
	rule__JoinType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getNATURALKeyword_0()); }
(
	KEYWORD_61 
)?
{ after(grammarAccess.getJoinTypeAccess().getNATURALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__1__Impl
	rule__JoinType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getAlternatives_1()); }
(rule__JoinType__Alternatives_1)?
{ after(grammarAccess.getJoinTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getJOINKeyword_2()); }

	KEYWORD_34 

{ after(grammarAccess.getJoinTypeAccess().getJOINKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JoinType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group_1_1__0__Impl
	rule__JoinType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getAlternatives_1_1_0()); }
(rule__JoinType__Alternatives_1_1_0)
{ after(grammarAccess.getJoinTypeAccess().getAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JoinType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JoinType__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JoinType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1()); }
(
	KEYWORD_49 
)?
{ after(grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FNAME__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FNAME__Group__0__Impl
	rule__FNAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FNAME__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FNAME__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FNAME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FNAME__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1()); }

	KEYWORD_1 

{ after(grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__QueryAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_0_0()); }
	ruleSelectQuery{ after(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__OrderByEntryAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_1_1_0()); }
	ruleOrderByColumns{ after(grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectQuery__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0()); }
	ruleSelectSubSet{ after(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getOpAlternatives_0_0()); }
(rule__SelectSubSet__OpAlternatives_0_0)
{ after(grammarAccess.getSelectSubSetAccess().getOpAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__AllAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
(
{ before(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }

	KEYWORD_23 

{ after(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
)

{ after(grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectSubSet__QueryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0()); }
	ruleSelect{ after(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__SelectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
(
{ before(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }

	KEYWORD_57 

{ after(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
)

{ after(grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ColsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0()); }
	ruleColumns{ after(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__TblAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0()); }
	ruleTables{ after(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__WhereExpressionAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__GroupByEntryAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_1_0()); }
	ruleGroupByColumns{ after(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select__HavingEntryAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Columns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
	ruleColumnOrAlias{ after(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__CeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getCeOperandParserRuleCall_0_0_0()); }
	ruleOperand{ after(grammarAccess.getColumnOrAliasAccess().getCeOperandParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__AliasAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
(
{ before(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }

	KEYWORD_18 

{ after(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
)

{ after(grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__ColAliasAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0()); }
	ruleDbObjectName{ after(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__AllColsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0()); }
	RULE_STAR{ after(grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOrAlias__DbAllColsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0()); }
	ruleDbObjectNameAll{ after(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnFull__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Tables__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0()); }
	ruleFromTable{ after(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__TableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0()); }
	ruleTableOrAlias{ after(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTable__FjoinAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0()); }
	ruleFromTableJoin{ after(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__JoinAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0()); }
	ruleJoinType{ after(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__OnTableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0()); }
	ruleTableOrAlias{ after(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FromTableJoin__JoinExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_3_0()); }
	ruleFullExpression{ after(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TfullAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0()); }
	ruleTableFull{ after(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__SqAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__AliasAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_1_0()); }
(
{ before(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_1_0()); }

	KEYWORD_18 

{ after(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_1_0()); }
)

{ after(grammarAccess.getTableOrAliasAccess().getAliasASKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableOrAlias__TblAliasAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_2_0()); }
	ruleDbObjectName{ after(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableFull__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
	ruleDbObjectName{ after(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectNameAll__DbnameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0()); }
	ruleDBID{ after(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DbObjectName__DbnameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0()); }
	ruleDBID{ after(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
	ruleOrderByColumnFull{ after(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0()); }
	ruleColumnFull{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__ColOrderIntAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getColOrderIntINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getOrderByColumnFullAccess().getColOrderIntINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderByColumnFull__DirectionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderByColumnFullAccess().getDirectionAlternatives_1_0()); }
(rule__OrderByColumnFull__DirectionAlternatives_1_0)
{ after(grammarAccess.getOrderByColumnFullAccess().getDirectionAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumns__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
	ruleGroupByColumnFull{ after(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupByColumnFull__ColGrByAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0()); }
	ruleColumnFull{ after(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FullExpression__EntriesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0()); }
	ruleExpressionFragmentSecond{ after(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__CAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getCAlternatives_0_0_0()); }
(rule__ExpressionFragmentSecond__CAlternatives_0_0_0)
{ after(grammarAccess.getExpressionFragmentSecondAccess().getCAlternatives_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__EfragAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0()); }
	ruleExpressionFragment{ after(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragmentSecond__NotPrmAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__ExpgroupAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0()); }
	ruleExpressionGroup{ after(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__XexpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getXexpAlternatives_2_0()); }
(rule__ExpressionFragment__XexpAlternatives_2_0)
{ after(grammarAccess.getExpressionFragmentAccess().getXexpAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionFragment__NotPrmAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionGroup__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_2_0()); }
	ruleFullExpression{ after(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__XfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_3_0()); }
	ruleXFunction{ after(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__ColAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getColOperandParserRuleCall_5_0()); }
	ruleOperand{ after(grammarAccess.getXExpressionAccess().getColOperandParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression__PrmAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
	ruleXExpressionParams{ after(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___XfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_3_0()); }
	ruleXFunction{ after(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___ColAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getColOperandParserRuleCall_5_0()); }
	ruleOperand{ after(grammarAccess.getXExpression_Access().getColOperandParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpression___PrmAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
	ruleXExpressionParams{ after(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XExpressionParams__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0()); }
	ruleJRParameter{ after(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JRParameter__JrprmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0()); }
	ruleOperand{ after(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__IsnullAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getIsnullAlternatives_1_0_0()); }
(rule__Expression__IsnullAlternatives_1_0_0)
{ after(grammarAccess.getExpressionAccess().getIsnullAlternatives_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__InAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0()); }
	ruleInOperator{ after(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__BetweenAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_2_0()); }
	ruleBetween{ after(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LikeAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_3_0()); }
	ruleLike{ after(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__CompAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_4_0()); }
	ruleComparison{ after(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOperatorAlternatives_0_0()); }
(rule__Comparison__OperatorAlternatives_0_0)
{ after(grammarAccess.getComparisonAccess().getOperatorAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SubOperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getSubOperatorAlternatives_1_0()); }
(rule__Comparison__SubOperatorAlternatives_1_0)
{ after(grammarAccess.getComparisonAccess().getSubOperatorAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Op2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0()); }
	ruleOperand{ after(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__OpLikeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOpLikeAlternatives_0_0()); }
(rule__Like__OpLikeAlternatives_0_0)
{ after(grammarAccess.getLikeAccess().getOpLikeAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Like__Op2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0()); }
	ruleLikeOperand{ after(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Op2Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0()); }
	ruleStringOperand{ after(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__Fop2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0()); }
	ruleOperandFunction{ after(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LikeOperand__FcastAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0()); }
	ruleOpFunctionCast{ after(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__OpBetweenAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOpBetweenAlternatives_0_0()); }
(rule__Between__OpBetweenAlternatives_0_0)
{ after(grammarAccess.getBetweenAccess().getOpBetweenAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Op2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp2OperandParserRuleCall_1_0()); }
	ruleOperand{ after(grammarAccess.getBetweenAccess().getOp2OperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Between__Op3Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBetweenAccess().getOp3OperandParserRuleCall_3_0()); }
	ruleOperand{ after(grammarAccess.getBetweenAccess().getOp3OperandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpAlternatives_1_0()); }
(rule__InOperator__OpAlternatives_1_0)
{ after(grammarAccess.getInOperatorAccess().getOpAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__SubqueryAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_3_0_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOperator__OpListAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOperatorAccess().getOpListOperandListParserRuleCall_3_1_0()); }
	ruleOperandList{ after(grammarAccess.getInOperatorAccess().getOpListOperandListParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandList__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0()); }
	ruleScalarOperand{ after(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Op1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0()); }
	ruleOperandFragment{ after(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0()); }
	ruleOperandFragment{ after(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__ColumnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0()); }
	ruleColumnOperand{ after(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__XopAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0()); }
	ruleXOperandFragment{ after(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__SubqAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0()); }
	ruleSubQueryOperand{ after(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__FcastAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0()); }
	ruleOpFunctionCast{ after(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__FuncAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_4_0()); }
	ruleOperandFunction{ after(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFragment__SqlcaseAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_5_0()); }
	ruleSQLCASE{ after(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__FnameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0()); }
	ruleFNAME{ after(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperandFunction__ArgsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0()); }
	ruleOpFunctionArg{ after(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArg__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0()); }
	ruleOpFunctionArgOperand{ after(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionArgOperand__OpAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionArgOperandAccess().getOpAlternatives_0()); }
(rule__OpFunctionArgOperand__OpAlternatives_0)
{ after(grammarAccess.getOpFunctionArgOperandAccess().getOpAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getOpOperandParserRuleCall_1_0()); }
	ruleOperand{ after(grammarAccess.getOpFunctionCastAccess().getOpOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__PAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getPINTTerminalRuleCall_4_1_0()); }
	RULE_INT{ after(grammarAccess.getOpFunctionCastAccess().getPINTTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpFunctionCast__P2Assignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpFunctionCastAccess().getP2INTTerminalRuleCall_4_2_1_0()); }
	RULE_INT{ after(grammarAccess.getOpFunctionCastAccess().getP2INTTerminalRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__ParamAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0()); }
	ruleParameterOperand{ after(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__EparamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0()); }
	ruleExclamationParameterOperand{ after(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XOperandFragment__ScalarAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXOperandFragmentAccess().getScalarScalarOperandParserRuleCall_2_0()); }
	ruleScalarOperand{ after(grammarAccess.getXOperandFragmentAccess().getScalarScalarOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterOperand__PrmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0()); }
	RULE_JRPARAM{ after(grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExclamationParameterOperand__PrmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0()); }
	RULE_JRNPARAM{ after(grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnOperand__CfullAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0()); }
	ruleColumnFull{ after(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubQueryOperand__SelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0()); }
	ruleSelectQuery{ after(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SointAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSointINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getScalarOperandAccess().getSointINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SostrAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_1_0()); }
	ruleStringOperand{ after(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodblAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_3_0()); }
	RULE_DATE{ after(grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SotimeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_4_0()); }
	RULE_TIME{ after(grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarOperand__SodtAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_5_0()); }
	RULE_TIMESTAMP{ after(grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCASE__WhenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0()); }
	ruleSQLCaseWhens{ after(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SQLCaseWhens__EntriesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0()); }
	ruleSqlCaseWhen{ after(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_0()); }
	ruleFullExpression{ after(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__TexpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getTexpOperandParserRuleCall_3_0()); }
	ruleOperand{ after(grammarAccess.getSqlCaseWhenAccess().getTexpOperandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SqlCaseWhen__EexpAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSqlCaseWhenAccess().getEexpOperandParserRuleCall_4_1_0()); }
	ruleOperand{ after(grammarAccess.getSqlCaseWhenAccess().getEexpOperandParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


