module Sql.GenerateSql

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/Sql/Sql.xtext"
var projectName = "com.jaspersoft.studio.data.sql"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."// The following two lines can be removed, if Xbase is not used.
//	registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
//	registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		activator = "com.jaspersoft.studio.data.sql.Activator"
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"//pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages
			fragment = ecore.EcoreGeneratorFragment {
			// referencedGenModels = "
			//  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
			//  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
			// "
			}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			// the old serialization component
			// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    

			// serializer 2.0
			//			fragment = serializer.SerializerFragment {
			//				generateStub = false
			//			}

			// a custom ResourceFactory for use with EMF
			//fragment = resourceFactory.ResourceFactoryFragment {}

			// The antlr parser generator fragment.
			//			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//      backtrack = true
			//  }
			//			}
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
				options = {
					ignoreCase = true
				}
			}

			// Xtend-based API for validation
			//fragment = validation.ValidatorFragment auto-inject {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			//}

			// old scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment auto-inject {}
			// fragment = exporting.SimpleNamesFragment auto-inject {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment {
				ignoreCase = true
			}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// generator API
			//fragment = generator.GeneratorFragment   {}

			// formatter API
			fragment = formatting.FormatterFragment {}

			// labeling API
			//fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			//fragment = outline.OutlineTreeProviderFragment auto-inject {
			//generateStub = false
			//}
			//fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			//fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment {
			//	generateStub = false
			}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {
				options = {
					ignoreCase = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.Junit4Fragment auto-inject {}

			// project wizard (optional)
			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
			//      generatorProjectName = "${projectName}"
			// }

			// rename refactoring
			//fragment = refactoring.RefactorElementNameFragment auto-inject {}

			// provides the necessary bindings for java types integration
			//fragment = types.TypesGeneratorFragment auto-inject {}

			// generates the required bindings only if the grammar inherits from Xbase
			//fragment = xbase.XbaseGeneratorFragment auto-inject {}

			// provides a preference page for template proposals
			//fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			//fragment = compare.CompareFragment auto-inject {}
		}
	}
}

