/*
* generated by Xtext
*/
parser grammar InternalSqlParser;

options {
	tokenVocab=InternalSqlLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package com.jaspersoft.studio.data.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.jaspersoft.studio.data.services.SqlGrammarAccess;

}

@members {


	private SqlGrammarAccess grammarAccess;
	 	
	public InternalSqlParser(TokenStream input, SqlGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected SqlGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getQuerySelectQueryParserRuleCall_0_0()); 
	    }
		lv_query_0_0=ruleSelectQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_0_0, 
        		"SelectQuery");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_68
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getORDERBYKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getOrderByEntryOrderByColumnsParserRuleCall_1_1_0()); 
	    }
		lv_orderByEntry_2_0=ruleOrderByColumns		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"orderByEntry",
        		lv_orderByEntry_2_0, 
        		"OrderByColumns");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_3=KEYWORD_46
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getLIMITKeyword_2_0());
    }
(
	otherlv_4=KEYWORD_23
    {
    	newLeafNode(otherlv_4, grammarAccess.getModelAccess().getALLKeyword_2_1_0());
    }

    |(this_INT_5=RULE_INT
    { 
    newLeafNode(this_INT_5, grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_0()); 
    }
(
	otherlv_6=KEYWORD_4
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getCommaKeyword_2_1_1_1_0());
    }
this_INT_7=RULE_INT
    { 
    newLeafNode(this_INT_7, grammarAccess.getModelAccess().getINTTerminalRuleCall_2_1_1_1_1()); 
    }
)?)))?(
	otherlv_8=KEYWORD_56
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getOFFSETKeyword_3_0());
    }
this_INT_9=RULE_INT
    { 
    newLeafNode(this_INT_9, grammarAccess.getModelAccess().getINTTerminalRuleCall_3_1()); 
    }
)?(
	otherlv_10=KEYWORD_75
    {
    	newLeafNode(otherlv_10, grammarAccess.getModelAccess().getFETCHFIRSTKeyword_4_0());
    }
this_INT_11=RULE_INT
    { 
    newLeafNode(this_INT_11, grammarAccess.getModelAccess().getINTTerminalRuleCall_4_1()); 
    }

	otherlv_12=KEYWORD_72
    {
    	newLeafNode(otherlv_12, grammarAccess.getModelAccess().getROWSONLYKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleSelectQuery
entryRuleSelectQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectQueryRule()); }
	 iv_ruleSelectQuery=ruleSelectQuery 
	 { $current=$iv_ruleSelectQuery.current; } 
	 EOF 
;

// Rule SelectQuery
ruleSelectQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSelectQueryAccess().getSelectParserRuleCall_0()); 
    }
    this_Select_0=ruleSelect
    {
        $current = $this_Select_0.current;
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectQueryAccess().getOpSelectSubSetParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleSelectSubSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectQueryRule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"SelectSubSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSelectSubSet
entryRuleSelectSubSet returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectSubSetRule()); }
	 iv_ruleSelectSubSet=ruleSelectSubSet 
	 { $current=$iv_ruleSelectSubSet.current; } 
	 EOF 
;

// Rule SelectSubSet
ruleSelectSubSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=
	KEYWORD_51
    {
        newLeafNode(lv_op_0_1, grammarAccess.getSelectSubSetAccess().getOpUNIONKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectSubSetRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=
	KEYWORD_71
    {
        newLeafNode(lv_op_0_2, grammarAccess.getSelectSubSetAccess().getOpINTERSECTKeyword_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectSubSetRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=
	KEYWORD_47
    {
        newLeafNode(lv_op_0_3, grammarAccess.getSelectSubSetAccess().getOpMINUSKeyword_0_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectSubSetRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

    |		lv_op_0_4=
	KEYWORD_53
    {
        newLeafNode(lv_op_0_4, grammarAccess.getSelectSubSetAccess().getOpEXCEPTKeyword_0_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectSubSetRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_4, null);
	    }

)

)
)(
(
		lv_all_1_0=
	KEYWORD_23
    {
        newLeafNode(lv_all_1_0, grammarAccess.getSelectSubSetAccess().getAllALLKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectSubSetRule());
	        }
       		setWithLastConsumed($current, "all", lv_all_1_0, "ALL");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectSubSetAccess().getQuerySelectParserRuleCall_2_0()); 
	    }
		lv_query_2_0=ruleSelect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectSubSetRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_2_0, 
        		"Select");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	 iv_ruleSelect=ruleSelect 
	 { $current=$iv_ruleSelect.current; } 
	 EOF 
;

// Rule Select
ruleSelect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_select_0_0=
	KEYWORD_57
    {
        newLeafNode(lv_select_0_0, grammarAccess.getSelectAccess().getSelectSELECTKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectRule());
	        }
       		setWithLastConsumed($current, "select", lv_select_0_0, "SELECT");
	    }

)
)(
	otherlv_1=KEYWORD_64
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectAccess().getDISTINCTKeyword_1());
    }
)?(
	otherlv_2=KEYWORD_28
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getTOPKeyword_2_0());
    }
(this_INT_3=RULE_INT
    { 
    newLeafNode(this_INT_3, grammarAccess.getSelectAccess().getINTTerminalRuleCall_2_1_0()); 
    }

    |this_SIGNED_DOUBLE_4=RULE_SIGNED_DOUBLE
    { 
    newLeafNode(this_SIGNED_DOUBLE_4, grammarAccess.getSelectAccess().getSIGNED_DOUBLETerminalRuleCall_2_1_1()); 
    }
)(
	otherlv_5=KEYWORD_62
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectAccess().getPERCENTKeyword_2_2());
    }
)?(
	otherlv_6=KEYWORD_73
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getWITHTIESKeyword_2_3());
    }
)?)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getColsColumnsParserRuleCall_3_0()); 
	    }
		lv_cols_7_0=ruleColumns		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"cols",
        		lv_cols_7_0, 
        		"Columns");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=KEYWORD_32
    {
    	newLeafNode(otherlv_8, grammarAccess.getSelectAccess().getFROMKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getTblTablesParserRuleCall_5_0()); 
	    }
		lv_tbl_9_0=ruleTables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"tbl",
        		lv_tbl_9_0, 
        		"Tables");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=KEYWORD_52
    {
    	newLeafNode(otherlv_10, grammarAccess.getSelectAccess().getWHEREKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getWhereExpressionFullExpressionParserRuleCall_6_1_0()); 
	    }
		lv_whereExpression_11_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"whereExpression",
        		lv_whereExpression_11_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_12=KEYWORD_65
    {
    	newLeafNode(otherlv_12, grammarAccess.getSelectAccess().getGROUPBYKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getGroupByEntryGroupByColumnsParserRuleCall_7_1_0()); 
	    }
		lv_groupByEntry_13_0=ruleGroupByColumns		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"groupByEntry",
        		lv_groupByEntry_13_0, 
        		"GroupByColumns");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_14=KEYWORD_54
    {
    	newLeafNode(otherlv_14, grammarAccess.getSelectAccess().getHAVINGKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectAccess().getHavingEntryFullExpressionParserRuleCall_8_1_0()); 
	    }
		lv_havingEntry_15_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectRule());
	        }
       		set(
       			$current, 
       			"havingEntry",
        		lv_havingEntry_15_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleColumns
entryRuleColumns returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getColumnsRule()); }
	 iv_ruleColumns=ruleColumns 
	 { $current=$iv_ruleColumns.current; } 
	 EOF 
;

// Rule Columns
ruleColumns returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getColumnsAccess().getColumnOrAliasParserRuleCall_0()); 
    }
    this_ColumnOrAlias_0=ruleColumnOrAlias
    {
        $current = $this_ColumnOrAlias_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getColumnsAccess().getOrColumnEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getColumnsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnsAccess().getEntriesColumnOrAliasParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleColumnOrAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnsRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ColumnOrAlias");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleColumnOrAlias
entryRuleColumnOrAlias returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getColumnOrAliasRule()); }
	 iv_ruleColumnOrAlias=ruleColumnOrAlias 
	 { $current=$iv_ruleColumnOrAlias.current; } 
	 EOF 
;

// Rule ColumnOrAlias
ruleColumnOrAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getCeOperandParserRuleCall_0_0_0()); 
	    }
		lv_ce_0_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
	        }
       		set(
       			$current, 
       			"ce",
        		lv_ce_0_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_alias_1_0=
	KEYWORD_18
    {
        newLeafNode(lv_alias_1_0, grammarAccess.getColumnOrAliasAccess().getAliasASKeyword_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnOrAliasRule());
	        }
       		setWithLastConsumed($current, "alias", lv_alias_1_0, "AS");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getColAliasDbObjectNameParserRuleCall_0_2_0()); 
	    }
		lv_colAlias_2_0=ruleDbObjectName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
	        }
       		set(
       			$current, 
       			"colAlias",
        		lv_colAlias_2_0, 
        		"DbObjectName");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(
(
		lv_allCols_3_0=RULE_STAR
		{
			newLeafNode(lv_allCols_3_0, grammarAccess.getColumnOrAliasAccess().getAllColsSTARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getColumnOrAliasRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"allCols",
        		lv_allCols_3_0, 
        		"STAR");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnOrAliasAccess().getDbAllColsDbObjectNameAllParserRuleCall_2_0()); 
	    }
		lv_dbAllCols_4_0=ruleDbObjectNameAll		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnOrAliasRule());
	        }
       		set(
       			$current, 
       			"dbAllCols",
        		lv_dbAllCols_4_0, 
        		"DbObjectNameAll");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleColumnFull
entryRuleColumnFull returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getColumnFullRule()); }
	 iv_ruleColumnFull=ruleColumnFull 
	 { $current=$iv_ruleColumnFull.current; } 
	 EOF 
;

// Rule ColumnFull
ruleColumnFull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getColumnFullAccess().getDbObjectNameParserRuleCall_0()); 
    }
    this_DbObjectName_0=ruleDbObjectName
    {
        $current = $this_DbObjectName_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getColumnFullAccess().getColEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_6
    {
    	newLeafNode(otherlv_2, grammarAccess.getColumnFullAccess().getFullStopKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleDbObjectName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnFullRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"DbObjectName");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleTables
entryRuleTables returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTablesRule()); }
	 iv_ruleTables=ruleTables 
	 { $current=$iv_ruleTables.current; } 
	 EOF 
;

// Rule Tables
ruleTables returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTablesAccess().getFromTableParserRuleCall_0()); 
    }
    this_FromTable_0=ruleFromTable
    {
        $current = $this_FromTable_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTablesAccess().getOrTableEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getTablesAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTablesAccess().getEntriesFromTableParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleFromTable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTablesRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"FromTable");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleFromTable
entryRuleFromTable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromTableRule()); }
	 iv_ruleFromTable=ruleFromTable 
	 { $current=$iv_ruleFromTable.current; } 
	 EOF 
;

// Rule FromTable
ruleFromTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFromTableAccess().getTableTableOrAliasParserRuleCall_0_0()); 
	    }
		lv_table_0_0=ruleTableOrAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromTableRule());
	        }
       		set(
       			$current, 
       			"table",
        		lv_table_0_0, 
        		"TableOrAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromTableAccess().getFjoinFromTableJoinParserRuleCall_1_0()); 
	    }
		lv_fjoin_1_0=ruleFromTableJoin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromTableRule());
	        }
       		add(
       			$current, 
       			"fjoin",
        		lv_fjoin_1_0, 
        		"FromTableJoin");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFromTableJoin
entryRuleFromTableJoin returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFromTableJoinRule()); }
	 iv_ruleFromTableJoin=ruleFromTableJoin 
	 { $current=$iv_ruleFromTableJoin.current; } 
	 EOF 
;

// Rule FromTableJoin
ruleFromTableJoin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinJoinTypeParserRuleCall_0_0()); 
	    }
		lv_join_0_0=ruleJoinType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
	        }
       		set(
       			$current, 
       			"join",
        		lv_join_0_0, 
        		"JoinType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFromTableJoinAccess().getOnTableTableOrAliasParserRuleCall_1_0()); 
	    }
		lv_onTable_1_0=ruleTableOrAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
	        }
       		set(
       			$current, 
       			"onTable",
        		lv_onTable_1_0, 
        		"TableOrAlias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_20
    {
    	newLeafNode(otherlv_2, grammarAccess.getFromTableJoinAccess().getONKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFromTableJoinAccess().getJoinExprFullExpressionParserRuleCall_3_0()); 
	    }
		lv_joinExpr_3_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFromTableJoinRule());
	        }
       		set(
       			$current, 
       			"joinExpr",
        		lv_joinExpr_3_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTableOrAlias
entryRuleTableOrAlias returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTableOrAliasRule()); }
	 iv_ruleTableOrAlias=ruleTableOrAlias 
	 { $current=$iv_ruleTableOrAlias.current; } 
	 EOF 
;

// Rule TableOrAlias
ruleTableOrAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTableOrAliasAccess().getTfullTableFullParserRuleCall_0_0_0()); 
	    }
		lv_tfull_0_0=ruleTableFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
	        }
       		set(
       			$current, 
       			"tfull",
        		lv_tfull_0_0, 
        		"TableFull");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTableOrAliasAccess().getSqSubQueryOperandParserRuleCall_0_1_0()); 
	    }
		lv_sq_1_0=ruleSubQueryOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
	        }
       		set(
       			$current, 
       			"sq",
        		lv_sq_1_0, 
        		"SubQueryOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_alias_2_0=
	KEYWORD_18
    {
        newLeafNode(lv_alias_2_0, grammarAccess.getTableOrAliasAccess().getAliasASKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableOrAliasRule());
	        }
       		setWithLastConsumed($current, "alias", lv_alias_2_0, "AS");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTableOrAliasAccess().getTblAliasDbObjectNameParserRuleCall_2_0()); 
	    }
		lv_tblAlias_3_0=ruleDbObjectName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableOrAliasRule());
	        }
       		set(
       			$current, 
       			"tblAlias",
        		lv_tblAlias_3_0, 
        		"DbObjectName");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTableFull
entryRuleTableFull returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTableFullRule()); }
	 iv_ruleTableFull=ruleTableFull 
	 { $current=$iv_ruleTableFull.current; } 
	 EOF 
;

// Rule TableFull
ruleTableFull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTableFullAccess().getDbObjectNameParserRuleCall_0()); 
    }
    this_DbObjectName_0=ruleDbObjectName
    {
        $current = $this_DbObjectName_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getTableFullAccess().getTblsEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_6
    {
    	newLeafNode(otherlv_2, grammarAccess.getTableFullAccess().getFullStopKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableFullAccess().getEntriesDbObjectNameParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleDbObjectName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableFullRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"DbObjectName");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleDbObjectNameAll
entryRuleDbObjectNameAll returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDbObjectNameAllRule()); }
	 iv_ruleDbObjectNameAll=ruleDbObjectNameAll 
	 { $current=$iv_ruleDbObjectNameAll.current; } 
	 EOF 
;

// Rule DbObjectNameAll
ruleDbObjectNameAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDbObjectNameAllAccess().getDbnameDBIDParserRuleCall_0_0()); 
	    }
		lv_dbname_0_0=ruleDBID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDbObjectNameAllRule());
	        }
       		set(
       			$current, 
       			"dbname",
        		lv_dbname_0_0, 
        		"DBID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_6
    {
    	newLeafNode(otherlv_1, grammarAccess.getDbObjectNameAllAccess().getFullStopKeyword_1());
    }
this_STAR_2=RULE_STAR
    { 
    newLeafNode(this_STAR_2, grammarAccess.getDbObjectNameAllAccess().getSTARTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleDbObjectName
entryRuleDbObjectName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDbObjectNameRule()); }
	 iv_ruleDbObjectName=ruleDbObjectName 
	 { $current=$iv_ruleDbObjectName.current; } 
	 EOF 
;

// Rule DbObjectName
ruleDbObjectName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDbObjectNameAccess().getDbnameDBIDParserRuleCall_0()); 
	    }
		lv_dbname_0_0=ruleDBID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDbObjectNameRule());
	        }
       		set(
       			$current, 
       			"dbname",
        		lv_dbname_0_0, 
        		"DBID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOrderByColumns
entryRuleOrderByColumns returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderByColumnsRule()); }
	 iv_ruleOrderByColumns=ruleOrderByColumns 
	 { $current=$iv_ruleOrderByColumns.current; } 
	 EOF 
;

// Rule OrderByColumns
ruleOrderByColumns returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrderByColumnsAccess().getOrderByColumnFullParserRuleCall_0()); 
    }
    this_OrderByColumnFull_0=ruleOrderByColumnFull
    {
        $current = $this_OrderByColumnFull_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrderByColumnsAccess().getOrOrderByColumnEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrderByColumnsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderByColumnsAccess().getEntriesOrderByColumnFullParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleOrderByColumnFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderByColumnsRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"OrderByColumnFull");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleOrderByColumnFull
entryRuleOrderByColumnFull returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderByColumnFullRule()); }
	 iv_ruleOrderByColumnFull=ruleOrderByColumnFull 
	 { $current=$iv_ruleOrderByColumnFull.current; } 
	 EOF 
;

// Rule OrderByColumnFull
ruleOrderByColumnFull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getOrderByColumnFullAccess().getColOrderColumnFullParserRuleCall_0_0_0()); 
	    }
		lv_colOrder_0_0=ruleColumnFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderByColumnFullRule());
	        }
       		set(
       			$current, 
       			"colOrder",
        		lv_colOrder_0_0, 
        		"ColumnFull");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_colOrderInt_1_0=RULE_INT
		{
			newLeafNode(lv_colOrderInt_1_0, grammarAccess.getOrderByColumnFullAccess().getColOrderIntINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderByColumnFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"colOrderInt",
        		lv_colOrderInt_1_0, 
        		"INT");
	    }

)
))(
(
(
		lv_direction_2_1=
	KEYWORD_26
    {
        newLeafNode(lv_direction_2_1, grammarAccess.getOrderByColumnFullAccess().getDirectionASCKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderByColumnFullRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_2_1, null);
	    }

    |		lv_direction_2_2=
	KEYWORD_30
    {
        newLeafNode(lv_direction_2_2, grammarAccess.getOrderByColumnFullAccess().getDirectionDESCKeyword_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrderByColumnFullRule());
	        }
       		setWithLastConsumed($current, "direction", lv_direction_2_2, null);
	    }

)

)
)?)
;





// Entry rule entryRuleGroupByColumns
entryRuleGroupByColumns returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupByColumnsRule()); }
	 iv_ruleGroupByColumns=ruleGroupByColumns 
	 { $current=$iv_ruleGroupByColumns.current; } 
	 EOF 
;

// Rule GroupByColumns
ruleGroupByColumns returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroupByColumnsAccess().getGroupByColumnFullParserRuleCall_0()); 
    }
    this_GroupByColumnFull_0=ruleGroupByColumnFull
    {
        $current = $this_GroupByColumnFull_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getGroupByColumnsAccess().getOrGroupByColumnEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupByColumnsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByColumnsAccess().getEntriesGroupByColumnFullParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleGroupByColumnFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByColumnsRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"GroupByColumnFull");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleGroupByColumnFull
entryRuleGroupByColumnFull returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupByColumnFullRule()); }
	 iv_ruleGroupByColumnFull=ruleGroupByColumnFull 
	 { $current=$iv_ruleGroupByColumnFull.current; } 
	 EOF 
;

// Rule GroupByColumnFull
ruleGroupByColumnFull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByColumnFullAccess().getColGrByColumnFullParserRuleCall_0()); 
	    }
		lv_colGrBy_0_0=ruleColumnFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByColumnFullRule());
	        }
       		set(
       			$current, 
       			"colGrBy",
        		lv_colGrBy_0_0, 
        		"ColumnFull");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFullExpression
entryRuleFullExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFullExpressionRule()); }
	 iv_ruleFullExpression=ruleFullExpression 
	 { $current=$iv_ruleFullExpression.current; } 
	 EOF 
;

// Rule FullExpression
ruleFullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFullExpressionAccess().getExpressionFragmentParserRuleCall_0()); 
    }
    this_ExpressionFragment_0=ruleExpressionFragment
    {
        $current = $this_ExpressionFragment_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getFullExpressionAccess().getOrExprEntriesAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullExpressionAccess().getEntriesExpressionFragmentSecondParserRuleCall_1_1_0()); 
	    }
		lv_entries_2_0=ruleExpressionFragmentSecond		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullExpressionRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_2_0, 
        		"ExpressionFragmentSecond");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleExpressionFragmentSecond
entryRuleExpressionFragmentSecond returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionFragmentSecondRule()); }
	 iv_ruleExpressionFragmentSecond=ruleExpressionFragmentSecond 
	 { $current=$iv_ruleExpressionFragmentSecond.current; } 
	 EOF 
;

// Rule ExpressionFragmentSecond
ruleExpressionFragmentSecond returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
(
		lv_c_0_1=
	KEYWORD_24
    {
        newLeafNode(lv_c_0_1, grammarAccess.getExpressionFragmentSecondAccess().getCANDKeyword_0_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
	        }
       		setWithLastConsumed($current, "c", lv_c_0_1, null);
	    }

    |		lv_c_0_2=
	KEYWORD_21
    {
        newLeafNode(lv_c_0_2, grammarAccess.getExpressionFragmentSecondAccess().getCORKeyword_0_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
	        }
       		setWithLastConsumed($current, "c", lv_c_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionFragmentSecondAccess().getEfragExpressionFragmentParserRuleCall_0_1_0()); 
	    }
		lv_efrag_1_0=ruleExpressionFragment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionFragmentSecondRule());
	        }
       		set(
       			$current, 
       			"efrag",
        		lv_efrag_1_0, 
        		"ExpressionFragment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_notPrm_2_0=RULE_JRNPARAM
		{
			newLeafNode(lv_notPrm_2_0, grammarAccess.getExpressionFragmentSecondAccess().getNotPrmJRNPARAMTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionFragmentSecondRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"notPrm",
        		lv_notPrm_2_0, 
        		"JRNPARAM");
	    }

)
))
;





// Entry rule entryRuleExpressionFragment
entryRuleExpressionFragment returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionFragmentRule()); }
	 iv_ruleExpressionFragment=ruleExpressionFragment 
	 { $current=$iv_ruleExpressionFragment.current; } 
	 EOF 
;

// Rule ExpressionFragment
ruleExpressionFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpgroupExpressionGroupParserRuleCall_0_0()); 
	    }
		lv_expgroup_0_0=ruleExpressionGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
	        }
       		set(
       			$current, 
       			"expgroup",
        		lv_expgroup_0_0, 
        		"ExpressionGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionFragmentAccess().getExpExpressionParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpressionParserRuleCall_2_0_0()); 
	    }
		lv_xexp_2_1=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
	        }
       		set(
       			$current, 
       			"xexp",
        		lv_xexp_2_1, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getExpressionFragmentAccess().getXexpXExpression_ParserRuleCall_2_0_1()); 
	    }
		lv_xexp_2_2=ruleXExpression_		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionFragmentRule());
	        }
       		set(
       			$current, 
       			"xexp",
        		lv_xexp_2_2, 
        		"XExpression_");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		lv_notPrm_3_0=RULE_JRNPARAM
		{
			newLeafNode(lv_notPrm_3_0, grammarAccess.getExpressionFragmentAccess().getNotPrmJRNPARAMTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionFragmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"notPrm",
        		lv_notPrm_3_0, 
        		"JRNPARAM");
	    }

)
))
;





// Entry rule entryRuleExpressionGroup
entryRuleExpressionGroup returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionGroupRule()); }
	 iv_ruleExpressionGroup=ruleExpressionGroup 
	 { $current=$iv_ruleExpressionGroup.current; } 
	 EOF 
;

// Rule ExpressionGroup
ruleExpressionGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionGroupAccess().getExprGroupAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionGroupAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionGroupAccess().getExprFullExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionGroupRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionGroupAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_14
    {
    	newLeafNode(otherlv_0, grammarAccess.getXExpressionAccess().getXKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpressionAccess().getXExprAction_1(),
            $current);
    }
)
	otherlv_2=KEYWORD_11
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionAccess().getXfXFunctionEnumRuleCall_3_0()); 
	    }
		lv_xf_3_0=ruleXFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionRule());
	        }
       		set(
       			$current, 
       			"xf",
        		lv_xf_3_0, 
        		"XFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_4
    {
    	newLeafNode(otherlv_4, grammarAccess.getXExpressionAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionAccess().getColOperandParserRuleCall_5_0()); 
	    }
		lv_col_5_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionRule());
	        }
       		set(
       			$current, 
       			"col",
        		lv_col_5_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=KEYWORD_4
    {
    	newLeafNode(otherlv_6, grammarAccess.getXExpressionAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionAccess().getPrmXExpressionParamsParserRuleCall_6_1_0()); 
	    }
		lv_prm_7_0=ruleXExpressionParams		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionRule());
	        }
       		set(
       			$current, 
       			"prm",
        		lv_prm_7_0, 
        		"XExpressionParams");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=KEYWORD_13
    {
    	newLeafNode(otherlv_8, grammarAccess.getXExpressionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleXExpression_
entryRuleXExpression_ returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpression_Rule()); }
	 iv_ruleXExpression_=ruleXExpression_ 
	 { $current=$iv_ruleXExpression_.current; } 
	 EOF 
;

// Rule XExpression_
ruleXExpression_ returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_14
    {
    	newLeafNode(otherlv_0, grammarAccess.getXExpression_Access().getXKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpression_Access().getXExprAction_1(),
            $current);
    }
)
	otherlv_2=KEYWORD_11
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpression_Access().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression_Access().getXfXFunctionEnumRuleCall_3_0()); 
	    }
		lv_xf_3_0=ruleXFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression_Rule());
	        }
       		set(
       			$current, 
       			"xf",
        		lv_xf_3_0, 
        		"XFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_12
    {
    	newLeafNode(otherlv_4, grammarAccess.getXExpression_Access().getVerticalLineKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression_Access().getColOperandParserRuleCall_5_0()); 
	    }
		lv_col_5_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression_Rule());
	        }
       		set(
       			$current, 
       			"col",
        		lv_col_5_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=KEYWORD_12
    {
    	newLeafNode(otherlv_6, grammarAccess.getXExpression_Access().getVerticalLineKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression_Access().getPrmXExpressionParamsParserRuleCall_6_1_0()); 
	    }
		lv_prm_7_0=ruleXExpressionParams		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression_Rule());
	        }
       		set(
       			$current, 
       			"prm",
        		lv_prm_7_0, 
        		"XExpressionParams");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=KEYWORD_13
    {
    	newLeafNode(otherlv_8, grammarAccess.getXExpression_Access().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleXExpressionParams
entryRuleXExpressionParams returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpressionParamsRule()); }
	 iv_ruleXExpressionParams=ruleXExpressionParams 
	 { $current=$iv_ruleXExpressionParams.current; } 
	 EOF 
;

// Rule XExpressionParams
ruleXExpressionParams returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXExpressionParamsAccess().getJRParameterParserRuleCall_0()); 
    }
    this_JRParameter_0=ruleJRParameter
    {
        $current = $this_JRParameter_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getXExpressionParamsAccess().getPrmsEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpressionParamsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionParamsAccess().getEntriesJRParameterParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleJRParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionParamsRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"JRParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleJRParameter
entryRuleJRParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJRParameterRule()); }
	 iv_ruleJRParameter=ruleJRParameter 
	 { $current=$iv_ruleJRParameter.current; } 
	 EOF 
;

// Rule JRParameter
ruleJRParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_jrprm_0_0=RULE_ID
		{
			newLeafNode(lv_jrprm_0_0, grammarAccess.getJRParameterAccess().getJrprmIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJRParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"jrprm",
        		lv_jrprm_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOp1OperandParserRuleCall_0_0()); 
	    }
		lv_op1_0_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"op1",
        		lv_op1_0_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_isnull_1_1=
	KEYWORD_60
    {
        newLeafNode(lv_isnull_1_1, grammarAccess.getExpressionAccess().getIsnullISNULLKeyword_1_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "isnull", lv_isnull_1_1, null);
	    }

    |		lv_isnull_1_2=
	KEYWORD_76
    {
        newLeafNode(lv_isnull_1_2, grammarAccess.getExpressionAccess().getIsnullISNOTNULLKeyword_1_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "isnull", lv_isnull_1_2, null);
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getInInOperatorParserRuleCall_1_1_0()); 
	    }
		lv_in_2_0=ruleInOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_2_0, 
        		"InOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getBetweenBetweenParserRuleCall_1_2_0()); 
	    }
		lv_between_3_0=ruleBetween		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"between",
        		lv_between_3_0, 
        		"Between");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLikeLikeParserRuleCall_1_3_0()); 
	    }
		lv_like_4_0=ruleLike		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"like",
        		lv_like_4_0, 
        		"Like");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCompComparisonParserRuleCall_1_4_0()); 
	    }
		lv_comp_5_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_5_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_operator_0_1=
	KEYWORD_10
    {
        newLeafNode(lv_operator_0_1, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_1, null);
	    }

    |		lv_operator_0_2=
	KEYWORD_17
    {
        newLeafNode(lv_operator_0_2, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_2, null);
	    }

    |		lv_operator_0_3=
	KEYWORD_8
    {
        newLeafNode(lv_operator_0_3, grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_0_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_3, null);
	    }

    |		lv_operator_0_4=
	KEYWORD_15
    {
        newLeafNode(lv_operator_0_4, grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_0_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_4, null);
	    }

    |		lv_operator_0_5=
	KEYWORD_9
    {
        newLeafNode(lv_operator_0_5, grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_0_0_4());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_5, null);
	    }

    |		lv_operator_0_6=
	KEYWORD_16
    {
        newLeafNode(lv_operator_0_6, grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_0_0_5());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_6, null);
	    }

)

)
)(
(
(
		lv_subOperator_1_1=
	KEYWORD_25
    {
        newLeafNode(lv_subOperator_1_1, grammarAccess.getComparisonAccess().getSubOperatorANYKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "subOperator", lv_subOperator_1_1, null);
	    }

    |		lv_subOperator_1_2=
	KEYWORD_23
    {
        newLeafNode(lv_subOperator_1_2, grammarAccess.getComparisonAccess().getSubOperatorALLKeyword_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "subOperator", lv_subOperator_1_2, null);
	    }

    |		lv_subOperator_1_3=
	KEYWORD_38
    {
        newLeafNode(lv_subOperator_1_3, grammarAccess.getComparisonAccess().getSubOperatorSOMEKeyword_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "subOperator", lv_subOperator_1_3, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getOp2OperandParserRuleCall_2_0()); 
	    }
		lv_op2_2_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_2_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLike
entryRuleLike returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLikeRule()); }
	 iv_ruleLike=ruleLike 
	 { $current=$iv_ruleLike.current; } 
	 EOF 
;

// Rule Like
ruleLike returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_opLike_0_1=
	KEYWORD_37
    {
        newLeafNode(lv_opLike_0_1, grammarAccess.getLikeAccess().getOpLikeLIKEKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLikeRule());
	        }
       		setWithLastConsumed($current, "opLike", lv_opLike_0_1, null);
	    }

    |		lv_opLike_0_2=
	KEYWORD_66
    {
        newLeafNode(lv_opLike_0_2, grammarAccess.getLikeAccess().getOpLikeNOTLIKEKeyword_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLikeRule());
	        }
       		setWithLastConsumed($current, "opLike", lv_opLike_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLikeAccess().getOp2LikeOperandParserRuleCall_1_0()); 
	    }
		lv_op2_1_0=ruleLikeOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_1_0, 
        		"LikeOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLikeOperand
entryRuleLikeOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLikeOperandRule()); }
	 iv_ruleLikeOperand=ruleLikeOperand 
	 { $current=$iv_ruleLikeOperand.current; } 
	 EOF 
;

// Rule LikeOperand
ruleLikeOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLikeOperandAccess().getOp2StringOperandParserRuleCall_0_0()); 
	    }
		lv_op2_0_0=ruleStringOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeOperandRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_0_0, 
        		"StringOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLikeOperandAccess().getFop2OperandFunctionParserRuleCall_1_0()); 
	    }
		lv_fop2_1_0=ruleOperandFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeOperandRule());
	        }
       		set(
       			$current, 
       			"fop2",
        		lv_fop2_1_0, 
        		"OperandFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLikeOperandAccess().getFcastOpFunctionCastParserRuleCall_2_0()); 
	    }
		lv_fcast_2_0=ruleOpFunctionCast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLikeOperandRule());
	        }
       		set(
       			$current, 
       			"fcast",
        		lv_fcast_2_0, 
        		"OpFunctionCast");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBetween
entryRuleBetween returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBetweenRule()); }
	 iv_ruleBetween=ruleBetween 
	 { $current=$iv_ruleBetween.current; } 
	 EOF 
;

// Rule Between
ruleBetween returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_opBetween_0_1=
	KEYWORD_58
    {
        newLeafNode(lv_opBetween_0_1, grammarAccess.getBetweenAccess().getOpBetweenBETWEENKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBetweenRule());
	        }
       		setWithLastConsumed($current, "opBetween", lv_opBetween_0_1, null);
	    }

    |		lv_opBetween_0_2=
	KEYWORD_77
    {
        newLeafNode(lv_opBetween_0_2, grammarAccess.getBetweenAccess().getOpBetweenNOTBETWEENKeyword_0_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBetweenRule());
	        }
       		setWithLastConsumed($current, "opBetween", lv_opBetween_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenAccess().getOp2OperandParserRuleCall_1_0()); 
	    }
		lv_op2_1_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenRule());
	        }
       		set(
       			$current, 
       			"op2",
        		lv_op2_1_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_24
    {
    	newLeafNode(otherlv_2, grammarAccess.getBetweenAccess().getANDKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBetweenAccess().getOp3OperandParserRuleCall_3_0()); 
	    }
		lv_op3_3_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBetweenRule());
	        }
       		set(
       			$current, 
       			"op3",
        		lv_op3_3_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInOperator
entryRuleInOperator returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInOperatorRule()); }
	 iv_ruleInOperator=ruleInOperator 
	 { $current=$iv_ruleInOperator.current; } 
	 EOF 
;

// Rule InOperator
ruleInOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInOperatorAccess().getInOperAction_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=
	KEYWORD_55
    {
        newLeafNode(lv_op_1_1, grammarAccess.getInOperatorAccess().getOpNOTINKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInOperatorRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=
	KEYWORD_19
    {
        newLeafNode(lv_op_1_2, grammarAccess.getInOperatorAccess().getOpINKeyword_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInOperatorRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)
	otherlv_2=KEYWORD_1
    {
    	newLeafNode(otherlv_2, grammarAccess.getInOperatorAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInOperatorAccess().getSubquerySubQueryOperandParserRuleCall_3_0_0()); 
	    }
		lv_subquery_3_0=ruleSubQueryOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInOperatorRule());
	        }
       		set(
       			$current, 
       			"subquery",
        		lv_subquery_3_0, 
        		"SubQueryOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInOperatorAccess().getOpListOperandListParserRuleCall_3_1_0()); 
	    }
		lv_opList_4_0=ruleOperandList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInOperatorRule());
	        }
       		set(
       			$current, 
       			"opList",
        		lv_opList_4_0, 
        		"OperandList");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_5=KEYWORD_2
    {
    	newLeafNode(otherlv_5, grammarAccess.getInOperatorAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleOperandList
entryRuleOperandList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOperandListRule()); }
	 iv_ruleOperandList=ruleOperandList 
	 { $current=$iv_ruleOperandList.current; } 
	 EOF 
;

// Rule OperandList
ruleOperandList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperandListAccess().getScalarOperandParserRuleCall_0()); 
    }
    this_ScalarOperand_0=ruleScalarOperand
    {
        $current = $this_ScalarOperand_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOperandListAccess().getOpListEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperandListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandListAccess().getEntriesScalarOperandParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleScalarOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandListRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"ScalarOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getOp1OperandFragmentParserRuleCall_0_0()); 
	    }
		lv_op1_0_0=ruleOperandFragment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"op1",
        		lv_op1_0_0, 
        		"OperandFragment");
	        afterParserOrEnumRuleCall();
	    }

)
)((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_3
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)
	otherlv_4=KEYWORD_5
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getHyphenMinusKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandAccess().getStarLeftAction_1_0_2_0(),
            $current);
    }
)this_STAR_6=RULE_STAR
    { 
    newLeafNode(this_STAR_6, grammarAccess.getOperandAccess().getSTARTerminalRuleCall_1_0_2_1()); 
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandAccess().getDivLeftAction_1_0_3_0(),
            $current);
    }
)
	otherlv_8=KEYWORD_7
    {
    	newLeafNode(otherlv_8, grammarAccess.getOperandAccess().getSolidusKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperandAccess().getConcatLeftAction_1_0_4_0(),
            $current);
    }
)
	otherlv_10=KEYWORD_22
    {
    	newLeafNode(otherlv_10, grammarAccess.getOperandAccess().getVerticalLineVerticalLineKeyword_1_0_4_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getRightOperandFragmentParserRuleCall_1_1_0()); 
	    }
		lv_right_11_0=ruleOperandFragment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_11_0, 
        		"OperandFragment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOperandFragment
entryRuleOperandFragment returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOperandFragmentRule()); }
	 iv_ruleOperandFragment=ruleOperandFragment 
	 { $current=$iv_ruleOperandFragment.current; } 
	 EOF 
;

// Rule OperandFragment
ruleOperandFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getColumnColumnOperandParserRuleCall_0_0()); 
	    }
		lv_column_0_0=ruleColumnOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"column",
        		lv_column_0_0, 
        		"ColumnOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getXopXOperandFragmentParserRuleCall_1_0()); 
	    }
		lv_xop_1_0=ruleXOperandFragment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"xop",
        		lv_xop_1_0, 
        		"XOperandFragment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getSubqSubQueryOperandParserRuleCall_2_0()); 
	    }
		lv_subq_2_0=ruleSubQueryOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"subq",
        		lv_subq_2_0, 
        		"SubQueryOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getFcastOpFunctionCastParserRuleCall_3_0()); 
	    }
		lv_fcast_3_0=ruleOpFunctionCast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"fcast",
        		lv_fcast_3_0, 
        		"OpFunctionCast");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getFuncOperandFunctionParserRuleCall_4_0()); 
	    }
		lv_func_4_0=ruleOperandFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_4_0, 
        		"OperandFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFragmentAccess().getSqlcaseSQLCASEParserRuleCall_5_0()); 
	    }
		lv_sqlcase_5_0=ruleSQLCASE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"sqlcase",
        		lv_sqlcase_5_0, 
        		"SQLCASE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperandFunction
entryRuleOperandFunction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOperandFunctionRule()); }
	 iv_ruleOperandFunction=ruleOperandFunction 
	 { $current=$iv_ruleOperandFunction.current; } 
	 EOF 
;

// Rule OperandFunction
ruleOperandFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperandFunctionAccess().getOpFunctionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFunctionAccess().getFnameFNAMEParserRuleCall_1_0()); 
	    }
		lv_fname_1_0=ruleFNAME		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
	        }
       		set(
       			$current, 
       			"fname",
        		lv_fname_1_0, 
        		"FNAME");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_STAR_2=RULE_STAR
    { 
    newLeafNode(this_STAR_2, grammarAccess.getOperandFunctionAccess().getSTARTerminalRuleCall_2_0()); 
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandFunctionAccess().getArgsOpFunctionArgParserRuleCall_2_1_0()); 
	    }
		lv_args_3_0=ruleOpFunctionArg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandFunctionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"OpFunctionArg");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_4=KEYWORD_2
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperandFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOpFunctionArg
entryRuleOpFunctionArg returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOpFunctionArgRule()); }
	 iv_ruleOpFunctionArg=ruleOpFunctionArg 
	 { $current=$iv_ruleOpFunctionArg.current; } 
	 EOF 
;

// Rule OpFunctionArg
ruleOpFunctionArg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOpFunctionArgAccess().getOpFunctionArgOperandParserRuleCall_0()); 
    }
    this_OpFunctionArgOperand_0=ruleOpFunctionArgOperand
    {
        $current = $this_OpFunctionArgOperand_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOpFunctionArgAccess().getOpFListEntriesAction_1_0(),
            $current);
    }
)(
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpFunctionArgAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpFunctionArgAccess().getEntriesOpFunctionArgOperandParserRuleCall_1_1_1_0()); 
	    }
		lv_entries_3_0=ruleOpFunctionArgOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpFunctionArgRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_3_0, 
        		"OpFunctionArgOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleOpFunctionArgOperand
entryRuleOpFunctionArgOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOpFunctionArgOperandRule()); }
	 iv_ruleOpFunctionArgOperand=ruleOpFunctionArgOperand 
	 { $current=$iv_ruleOpFunctionArgOperand.current; } 
	 EOF 
;

// Rule OpFunctionArgOperand
ruleOpFunctionArgOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOpFunctionArgAgregateParserRuleCall_0_0()); 
	    }
		lv_op_0_1=ruleOpFunctionArgAgregate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_1, 
        		"OpFunctionArgAgregate");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOpFunctionArgOperandAccess().getOpOperandParserRuleCall_0_1()); 
	    }
		lv_op_0_2=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpFunctionArgOperandRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_2, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleOpFunctionCast
entryRuleOpFunctionCast returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOpFunctionCastRule()); }
	 iv_ruleOpFunctionCast=ruleOpFunctionCast 
	 { $current=$iv_ruleOpFunctionCast.current; } 
	 EOF 
;

// Rule OpFunctionCast
ruleOpFunctionCast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_41
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpFunctionCastAccess().getCASTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpFunctionCastAccess().getOpOperandParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpFunctionCastRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_18
    {
    	newLeafNode(otherlv_2, grammarAccess.getOpFunctionCastAccess().getASKeyword_2());
    }
(
(
		lv_type_3_0=RULE_ID
		{
			newLeafNode(lv_type_3_0, grammarAccess.getOpFunctionCastAccess().getTypeIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpFunctionCastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ID");
	    }

)
)(
	otherlv_4=KEYWORD_1
    {
    	newLeafNode(otherlv_4, grammarAccess.getOpFunctionCastAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		lv_p_5_0=RULE_INT
		{
			newLeafNode(lv_p_5_0, grammarAccess.getOpFunctionCastAccess().getPINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpFunctionCastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"p",
        		lv_p_5_0, 
        		"INT");
	    }

)
)(
	otherlv_6=KEYWORD_4
    {
    	newLeafNode(otherlv_6, grammarAccess.getOpFunctionCastAccess().getCommaKeyword_4_2_0());
    }
(
(
		lv_p2_7_0=RULE_INT
		{
			newLeafNode(lv_p2_7_0, grammarAccess.getOpFunctionCastAccess().getP2INTTerminalRuleCall_4_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpFunctionCastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"p2",
        		lv_p2_7_0, 
        		"INT");
	    }

)
))?
	otherlv_8=KEYWORD_2
    {
    	newLeafNode(otherlv_8, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_4_3());
    }
)?
	otherlv_9=KEYWORD_2
    {
    	newLeafNode(otherlv_9, grammarAccess.getOpFunctionCastAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleOpFunctionArgAgregate
entryRuleOpFunctionArgAgregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOpFunctionArgAgregateRule()); }
	 iv_ruleOpFunctionArgAgregate=ruleOpFunctionArgAgregate 
	 { $current=$iv_ruleOpFunctionArgAgregate.current; } 
	 EOF 
;

// Rule OpFunctionArgAgregate
ruleOpFunctionArgAgregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_23
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpFunctionArgAgregateAccess().getALLKeyword_0_0());
    }

    |
	otherlv_1=KEYWORD_64
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpFunctionArgAgregateAccess().getDISTINCTKeyword_0_1());
    }
)
    { 
        newCompositeNode(grammarAccess.getOpFunctionArgAgregateAccess().getOperandParserRuleCall_1()); 
    }
    this_Operand_2=ruleOperand
    {
        $current = $this_Operand_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXOperandFragment
entryRuleXOperandFragment returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXOperandFragmentRule()); }
	 iv_ruleXOperandFragment=ruleXOperandFragment 
	 { $current=$iv_ruleXOperandFragment.current; } 
	 EOF 
;

// Rule XOperandFragment
ruleXOperandFragment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXOperandFragmentAccess().getParamParameterOperandParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParameterOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"ParameterOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXOperandFragmentAccess().getEparamExclamationParameterOperandParserRuleCall_1_0()); 
	    }
		lv_eparam_1_0=ruleExclamationParameterOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"eparam",
        		lv_eparam_1_0, 
        		"ExclamationParameterOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXOperandFragmentAccess().getScalarScalarOperandParserRuleCall_2_0()); 
	    }
		lv_scalar_2_0=ruleScalarOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOperandFragmentRule());
	        }
       		set(
       			$current, 
       			"scalar",
        		lv_scalar_2_0, 
        		"ScalarOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterOperand
entryRuleParameterOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterOperandRule()); }
	 iv_ruleParameterOperand=ruleParameterOperand 
	 { $current=$iv_ruleParameterOperand.current; } 
	 EOF 
;

// Rule ParameterOperand
ruleParameterOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_prm_0_0=RULE_JRPARAM
		{
			newLeafNode(lv_prm_0_0, grammarAccess.getParameterOperandAccess().getPrmJRPARAMTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prm",
        		lv_prm_0_0, 
        		"JRPARAM");
	    }

)
)
;





// Entry rule entryRuleExclamationParameterOperand
entryRuleExclamationParameterOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExclamationParameterOperandRule()); }
	 iv_ruleExclamationParameterOperand=ruleExclamationParameterOperand 
	 { $current=$iv_ruleExclamationParameterOperand.current; } 
	 EOF 
;

// Rule ExclamationParameterOperand
ruleExclamationParameterOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_prm_0_0=RULE_JRNPARAM
		{
			newLeafNode(lv_prm_0_0, grammarAccess.getExclamationParameterOperandAccess().getPrmJRNPARAMTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExclamationParameterOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prm",
        		lv_prm_0_0, 
        		"JRNPARAM");
	    }

)
)
;





// Entry rule entryRuleColumnOperand
entryRuleColumnOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getColumnOperandRule()); }
	 iv_ruleColumnOperand=ruleColumnOperand 
	 { $current=$iv_ruleColumnOperand.current; } 
	 EOF 
;

// Rule ColumnOperand
ruleColumnOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getColumnOperandAccess().getCfullColumnFullParserRuleCall_0()); 
	    }
		lv_cfull_0_0=ruleColumnFull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColumnOperandRule());
	        }
       		set(
       			$current, 
       			"cfull",
        		lv_cfull_0_0, 
        		"ColumnFull");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSubQueryOperand
entryRuleSubQueryOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubQueryOperandRule()); }
	 iv_ruleSubQueryOperand=ruleSubQueryOperand 
	 { $current=$iv_ruleSubQueryOperand.current; } 
	 EOF 
;

// Rule SubQueryOperand
ruleSubQueryOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubQueryOperandAccess().getSubQueryOperandAction_0(),
            $current);
    }
)
	otherlv_1=KEYWORD_1
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubQueryOperandAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubQueryOperandAccess().getSelSelectQueryParserRuleCall_2_0()); 
	    }
		lv_sel_2_0=ruleSelectQuery		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubQueryOperandRule());
	        }
       		set(
       			$current, 
       			"sel",
        		lv_sel_2_0, 
        		"SelectQuery");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_2
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubQueryOperandAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleScalarOperand
entryRuleScalarOperand returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getScalarOperandRule()); }
	 iv_ruleScalarOperand=ruleScalarOperand 
	 { $current=$iv_ruleScalarOperand.current; } 
	 EOF 
;

// Rule ScalarOperand
ruleScalarOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_soint_0_0=RULE_INT
		{
			newLeafNode(lv_soint_0_0, grammarAccess.getScalarOperandAccess().getSointINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"soint",
        		lv_soint_0_0, 
        		"INT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getScalarOperandAccess().getSostrStringOperandParserRuleCall_1_0()); 
	    }
		lv_sostr_1_0=ruleStringOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarOperandRule());
	        }
       		set(
       			$current, 
       			"sostr",
        		lv_sostr_1_0, 
        		"StringOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_sodbl_2_0=RULE_SIGNED_DOUBLE
		{
			newLeafNode(lv_sodbl_2_0, grammarAccess.getScalarOperandAccess().getSodblSIGNED_DOUBLETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sodbl",
        		lv_sodbl_2_0, 
        		"SIGNED_DOUBLE");
	    }

)
)
    |(
(
		lv_sodate_3_0=RULE_DATE
		{
			newLeafNode(lv_sodate_3_0, grammarAccess.getScalarOperandAccess().getSodateDATETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sodate",
        		lv_sodate_3_0, 
        		"DATE");
	    }

)
)
    |(
(
		lv_sotime_4_0=RULE_TIME
		{
			newLeafNode(lv_sotime_4_0, grammarAccess.getScalarOperandAccess().getSotimeTIMETerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sotime",
        		lv_sotime_4_0, 
        		"TIME");
	    }

)
)
    |(
(
		lv_sodt_5_0=RULE_TIMESTAMP
		{
			newLeafNode(lv_sodt_5_0, grammarAccess.getScalarOperandAccess().getSodtTIMESTAMPTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sodt",
        		lv_sodt_5_0, 
        		"TIMESTAMP");
	    }

)
))
;





// Entry rule entryRuleSQLCASE
entryRuleSQLCASE returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSQLCASERule()); }
	 iv_ruleSQLCASE=ruleSQLCASE 
	 { $current=$iv_ruleSQLCASE.current; } 
	 EOF 
;

// Rule SQLCASE
ruleSQLCASE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_29
    {
    	newLeafNode(otherlv_0, grammarAccess.getSQLCASEAccess().getCASEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSQLCASEAccess().getExprFullExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSQLCASERule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSQLCASEAccess().getWhenSQLCaseWhensParserRuleCall_2_0()); 
	    }
		lv_when_2_0=ruleSQLCaseWhens		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSQLCASERule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_2_0, 
        		"SQLCaseWhens");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_27
    {
    	newLeafNode(otherlv_3, grammarAccess.getSQLCASEAccess().getENDKeyword_3());
    }
)
;





// Entry rule entryRuleSQLCaseWhens
entryRuleSQLCaseWhens returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSQLCaseWhensRule()); }
	 iv_ruleSQLCaseWhens=ruleSQLCaseWhens 
	 { $current=$iv_ruleSQLCaseWhens.current; } 
	 EOF 
;

// Rule SQLCaseWhens
ruleSQLCaseWhens returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getSqlCaseWhenParserRuleCall_0()); 
    }
    this_SqlCaseWhen_0=ruleSqlCaseWhen
    {
        $current = $this_SqlCaseWhen_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSQLCaseWhensAccess().getWhenListEntriesAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSQLCaseWhensAccess().getEntriesSqlCaseWhenParserRuleCall_1_1_0()); 
	    }
		lv_entries_2_0=ruleSqlCaseWhen		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSQLCaseWhensRule());
	        }
       		add(
       			$current, 
       			"entries",
        		lv_entries_2_0, 
        		"SqlCaseWhen");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleSqlCaseWhen
entryRuleSqlCaseWhen returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSqlCaseWhenRule()); }
	 iv_ruleSqlCaseWhen=ruleSqlCaseWhen 
	 { $current=$iv_ruleSqlCaseWhen.current; } 
	 EOF 
;

// Rule SqlCaseWhen
ruleSqlCaseWhen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_40
    {
    	newLeafNode(otherlv_0, grammarAccess.getSqlCaseWhenAccess().getWHENKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getExprFullExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleFullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"FullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_39
    {
    	newLeafNode(otherlv_2, grammarAccess.getSqlCaseWhenAccess().getTHENKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getTexpOperandParserRuleCall_3_0()); 
	    }
		lv_texp_3_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
	        }
       		set(
       			$current, 
       			"texp",
        		lv_texp_3_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_31
    {
    	newLeafNode(otherlv_4, grammarAccess.getSqlCaseWhenAccess().getELSEKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSqlCaseWhenAccess().getEexpOperandParserRuleCall_4_1_0()); 
	    }
		lv_eexp_5_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSqlCaseWhenRule());
	        }
       		set(
       			$current, 
       			"eexp",
        		lv_eexp_5_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJoinType
entryRuleJoinType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getJoinTypeRule()); } 
	 iv_ruleJoinType=ruleJoinType 
	 { $current=$iv_ruleJoinType.current.getText(); }  
	 EOF 
;

// Rule JoinType
ruleJoinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_61 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getNATURALKeyword_0()); 
    }
)?(
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getINNERKeyword_1_0()); 
    }

    |((
	kw=KEYWORD_35 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getLEFTKeyword_1_1_0_0()); 
    }

    |
	kw=KEYWORD_50 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getRIGHTKeyword_1_1_0_1()); 
    }

    |
	kw=KEYWORD_33 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getFULLKeyword_1_1_0_2()); 
    }
)(
	kw=KEYWORD_49 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getOUTERKeyword_1_1_1()); 
    }
)?)
    |
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getCROSSKeyword_1_2()); 
    }
)?
	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJoinTypeAccess().getJOINKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleDBID
entryRuleDBID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDBIDRule()); } 
	 iv_ruleDBID=ruleDBID 
	 { $current=$iv_ruleDBID.current.getText(); }  
	 EOF 
;

// Rule DBID
ruleDBID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getDBIDAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_DBNAME_1=RULE_DBNAME    {
		$current.merge(this_DBNAME_1);
    }

    { 
    newLeafNode(this_DBNAME_1, grammarAccess.getDBIDAccess().getDBNAMETerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getDBIDAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleStringOperand
entryRuleStringOperand returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getStringOperandRule()); } 
	 iv_ruleStringOperand=ruleStringOperand 
	 { $current=$iv_ruleStringOperand.current.getText(); }  
	 EOF 
;

// Rule StringOperand
ruleStringOperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING__0=RULE_STRING_    {
		$current.merge(this_STRING__0);
    }

    { 
    newLeafNode(this_STRING__0, grammarAccess.getStringOperandAccess().getSTRING_TerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFNAME
entryRuleFNAME returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFNAMERule()); } 
	 iv_ruleFNAME=ruleFNAME 
	 { $current=$iv_ruleFNAME.current.getText(); }  
	 EOF 
;

// Rule FNAME
ruleFNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFNAMEAccess().getIDTerminalRuleCall_0()); 
    }

	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFNAMEAccess().getLeftParenthesisKeyword_1()); 
    }
)
    ;





// Rule XFunction
ruleXFunction returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=KEYWORD_19
    {
        $current = grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getXFunctionAccess().getXinEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=KEYWORD_48
    {
        $current = grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getXFunctionAccess().getXnotinEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=KEYWORD_43
    {
        $current = grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getXFunctionAccess().getXeqEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=KEYWORD_67
    {
        $current = grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getXFunctionAccess().getXnoteqEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=KEYWORD_36
    {
        $current = grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getXFunctionAccess().getXlsEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=KEYWORD_59
    {
        $current = grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getXFunctionAccess().getXgtEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=KEYWORD_45
    {
        $current = grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getXFunctionAccess().getXlsrEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=KEYWORD_70
    {
        $current = grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getXFunctionAccess().getXgtlEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=KEYWORD_58
    {
        $current = grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getXFunctionAccess().getXbwnEnumLiteralDeclaration_8()); 
    }
)
    |(    enumLiteral_9=KEYWORD_74
    {
        $current = grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getXFunctionAccess().getXbwncEnumLiteralDeclaration_9()); 
    }
)
    |(    enumLiteral_10=KEYWORD_69
    {
        $current = grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getXFunctionAccess().getXbwnlEnumLiteralDeclaration_10()); 
    }
)
    |(    enumLiteral_11=KEYWORD_63
    {
        $current = grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getXFunctionAccess().getXbwnrEnumLiteralDeclaration_11()); 
    }
));



